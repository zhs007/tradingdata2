// source: trading2.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.tradingpb.AIPParams', null, global);
goog.exportSymbol('proto.tradingpb.AIPTimeType', null, global);
goog.exportSymbol('proto.tradingpb.Asset', null, global);
goog.exportSymbol('proto.tradingpb.BasicRequestData', null, global);
goog.exportSymbol('proto.tradingpb.BuyParams', null, global);
goog.exportSymbol('proto.tradingpb.CtrlCondition', null, global);
goog.exportSymbol('proto.tradingpb.CtrlNode', null, global);
goog.exportSymbol('proto.tradingpb.CtrlType', null, global);
goog.exportSymbol('proto.tradingpb.Indicator', null, global);
goog.exportSymbol('proto.tradingpb.IndicatorData', null, global);
goog.exportSymbol('proto.tradingpb.IndicatorType', null, global);
goog.exportSymbol('proto.tradingpb.InitParams', null, global);
goog.exportSymbol('proto.tradingpb.PNLAssetData', null, global);
goog.exportSymbol('proto.tradingpb.PNLData', null, global);
goog.exportSymbol('proto.tradingpb.PNLDataValue', null, global);
goog.exportSymbol('proto.tradingpb.SellParams', null, global);
goog.exportSymbol('proto.tradingpb.SimTradingCache', null, global);
goog.exportSymbol('proto.tradingpb.SimTradingCacheNode', null, global);
goog.exportSymbol('proto.tradingpb.SimTradingParams', null, global);
goog.exportSymbol('proto.tradingpb.StopLossParams', null, global);
goog.exportSymbol('proto.tradingpb.Strategy', null, global);
goog.exportSymbol('proto.tradingpb.TakeProfitParams', null, global);
goog.exportSymbol('proto.tradingpb.TradingNodeInfo', null, global);
goog.exportSymbol('proto.tradingpb.Wallet', null, global);
goog.exportSymbol('proto.tradingpb.WalletAsset', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.BasicRequestData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpb.BasicRequestData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.BasicRequestData.displayName = 'proto.tradingpb.BasicRequestData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.Asset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tradingpb.Asset.repeatedFields_, null);
};
goog.inherits(proto.tradingpb.Asset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.Asset.displayName = 'proto.tradingpb.Asset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.CtrlNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpb.CtrlNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.CtrlNode.displayName = 'proto.tradingpb.CtrlNode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.WalletAsset = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpb.WalletAsset, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.WalletAsset.displayName = 'proto.tradingpb.WalletAsset';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.Wallet = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tradingpb.Wallet.repeatedFields_, null);
};
goog.inherits(proto.tradingpb.Wallet, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.Wallet.displayName = 'proto.tradingpb.Wallet';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.CtrlCondition = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tradingpb.CtrlCondition.repeatedFields_, null);
};
goog.inherits(proto.tradingpb.CtrlCondition, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.CtrlCondition.displayName = 'proto.tradingpb.CtrlCondition';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.IndicatorData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tradingpb.IndicatorData.repeatedFields_, null);
};
goog.inherits(proto.tradingpb.IndicatorData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.IndicatorData.displayName = 'proto.tradingpb.IndicatorData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.Indicator = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tradingpb.Indicator.repeatedFields_, null);
};
goog.inherits(proto.tradingpb.Indicator, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.Indicator.displayName = 'proto.tradingpb.Indicator';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.BuyParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpb.BuyParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.BuyParams.displayName = 'proto.tradingpb.BuyParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.SellParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpb.SellParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.SellParams.displayName = 'proto.tradingpb.SellParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.StopLossParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpb.StopLossParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.StopLossParams.displayName = 'proto.tradingpb.StopLossParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.TakeProfitParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpb.TakeProfitParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.TakeProfitParams.displayName = 'proto.tradingpb.TakeProfitParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.InitParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpb.InitParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.InitParams.displayName = 'proto.tradingpb.InitParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.AIPParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpb.AIPParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.AIPParams.displayName = 'proto.tradingpb.AIPParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.Strategy = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tradingpb.Strategy.repeatedFields_, null);
};
goog.inherits(proto.tradingpb.Strategy, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.Strategy.displayName = 'proto.tradingpb.Strategy';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.PNLDataValue = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tradingpb.PNLDataValue.repeatedFields_, null);
};
goog.inherits(proto.tradingpb.PNLDataValue, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.PNLDataValue.displayName = 'proto.tradingpb.PNLDataValue';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.PNLAssetData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tradingpb.PNLAssetData.repeatedFields_, null);
};
goog.inherits(proto.tradingpb.PNLAssetData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.PNLAssetData.displayName = 'proto.tradingpb.PNLAssetData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.PNLData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tradingpb.PNLData.repeatedFields_, null);
};
goog.inherits(proto.tradingpb.PNLData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.PNLData.displayName = 'proto.tradingpb.PNLData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.SimTradingParams = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tradingpb.SimTradingParams.repeatedFields_, null);
};
goog.inherits(proto.tradingpb.SimTradingParams, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.SimTradingParams.displayName = 'proto.tradingpb.SimTradingParams';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.TradingNodeInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpb.TradingNodeInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.TradingNodeInfo.displayName = 'proto.tradingpb.TradingNodeInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.SimTradingCacheNode = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpb.SimTradingCacheNode, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.SimTradingCacheNode.displayName = 'proto.tradingpb.SimTradingCacheNode';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.SimTradingCache = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tradingpb.SimTradingCache.repeatedFields_, null);
};
goog.inherits(proto.tradingpb.SimTradingCache, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.SimTradingCache.displayName = 'proto.tradingpb.SimTradingCache';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.BasicRequestData.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.BasicRequestData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.BasicRequestData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.BasicRequestData.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.BasicRequestData}
 */
proto.tradingpb.BasicRequestData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.BasicRequestData;
  return proto.tradingpb.BasicRequestData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.BasicRequestData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.BasicRequestData}
 */
proto.tradingpb.BasicRequestData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.BasicRequestData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.BasicRequestData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.BasicRequestData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.BasicRequestData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.tradingpb.BasicRequestData.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.BasicRequestData} returns this
 */
proto.tradingpb.BasicRequestData.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tradingpb.Asset.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.Asset.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.Asset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.Asset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.Asset.toObject = function(includeInstance, msg) {
  var f, obj = {
    market: jspb.Message.getFieldWithDefault(msg, 1, ""),
    code: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.Asset}
 */
proto.tradingpb.Asset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.Asset;
  return proto.tradingpb.Asset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.Asset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.Asset}
 */
proto.tradingpb.Asset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.Asset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.Asset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.Asset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.Asset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional string market = 1;
 * @return {string}
 */
proto.tradingpb.Asset.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.Asset} returns this
 */
proto.tradingpb.Asset.prototype.setMarket = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string code = 2;
 * @return {string}
 */
proto.tradingpb.Asset.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.Asset} returns this
 */
proto.tradingpb.Asset.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string tags = 3;
 * @return {!Array<string>}
 */
proto.tradingpb.Asset.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tradingpb.Asset} returns this
 */
proto.tradingpb.Asset.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.Asset} returns this
 */
proto.tradingpb.Asset.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.Asset} returns this
 */
proto.tradingpb.Asset.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.CtrlNode.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.CtrlNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.CtrlNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.CtrlNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    ts: jspb.Message.getFieldWithDefault(msg, 1, 0),
    src: (f = msg.getSrc()) && proto.tradingpb.Asset.toObject(includeInstance, f),
    dst: (f = msg.getDst()) && proto.tradingpb.Asset.toObject(includeInstance, f),
    volumesrc: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    volumedst: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    type: jspb.Message.getFieldWithDefault(msg, 6, 0),
    fee: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    averageholdingprice: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    sellprice: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.CtrlNode}
 */
proto.tradingpb.CtrlNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.CtrlNode;
  return proto.tradingpb.CtrlNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.CtrlNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.CtrlNode}
 */
proto.tradingpb.CtrlNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTs(value);
      break;
    case 2:
      var value = new proto.tradingpb.Asset;
      reader.readMessage(value,proto.tradingpb.Asset.deserializeBinaryFromReader);
      msg.setSrc(value);
      break;
    case 3:
      var value = new proto.tradingpb.Asset;
      reader.readMessage(value,proto.tradingpb.Asset.deserializeBinaryFromReader);
      msg.setDst(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVolumesrc(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVolumedst(value);
      break;
    case 6:
      var value = /** @type {!proto.tradingpb.CtrlType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setFee(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setAverageholdingprice(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setSellprice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.CtrlNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.CtrlNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.CtrlNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.CtrlNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTs();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getSrc();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tradingpb.Asset.serializeBinaryToWriter
    );
  }
  f = message.getDst();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tradingpb.Asset.serializeBinaryToWriter
    );
  }
  f = message.getVolumesrc();
  if (f !== 0.0) {
    writer.writeDouble(
      4,
      f
    );
  }
  f = message.getVolumedst();
  if (f !== 0.0) {
    writer.writeDouble(
      5,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      6,
      f
    );
  }
  f = message.getFee();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getAverageholdingprice();
  if (f !== 0.0) {
    writer.writeDouble(
      8,
      f
    );
  }
  f = message.getSellprice();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
};


/**
 * optional int64 ts = 1;
 * @return {number}
 */
proto.tradingpb.CtrlNode.prototype.getTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.CtrlNode} returns this
 */
proto.tradingpb.CtrlNode.prototype.setTs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional Asset src = 2;
 * @return {?proto.tradingpb.Asset}
 */
proto.tradingpb.CtrlNode.prototype.getSrc = function() {
  return /** @type{?proto.tradingpb.Asset} */ (
    jspb.Message.getWrapperField(this, proto.tradingpb.Asset, 2));
};


/**
 * @param {?proto.tradingpb.Asset|undefined} value
 * @return {!proto.tradingpb.CtrlNode} returns this
*/
proto.tradingpb.CtrlNode.prototype.setSrc = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.CtrlNode} returns this
 */
proto.tradingpb.CtrlNode.prototype.clearSrc = function() {
  return this.setSrc(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.CtrlNode.prototype.hasSrc = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional Asset dst = 3;
 * @return {?proto.tradingpb.Asset}
 */
proto.tradingpb.CtrlNode.prototype.getDst = function() {
  return /** @type{?proto.tradingpb.Asset} */ (
    jspb.Message.getWrapperField(this, proto.tradingpb.Asset, 3));
};


/**
 * @param {?proto.tradingpb.Asset|undefined} value
 * @return {!proto.tradingpb.CtrlNode} returns this
*/
proto.tradingpb.CtrlNode.prototype.setDst = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.CtrlNode} returns this
 */
proto.tradingpb.CtrlNode.prototype.clearDst = function() {
  return this.setDst(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.CtrlNode.prototype.hasDst = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional double volumeSrc = 4;
 * @return {number}
 */
proto.tradingpb.CtrlNode.prototype.getVolumesrc = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.CtrlNode} returns this
 */
proto.tradingpb.CtrlNode.prototype.setVolumesrc = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional double volumeDst = 5;
 * @return {number}
 */
proto.tradingpb.CtrlNode.prototype.getVolumedst = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.CtrlNode} returns this
 */
proto.tradingpb.CtrlNode.prototype.setVolumedst = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional CtrlType type = 6;
 * @return {!proto.tradingpb.CtrlType}
 */
proto.tradingpb.CtrlNode.prototype.getType = function() {
  return /** @type {!proto.tradingpb.CtrlType} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {!proto.tradingpb.CtrlType} value
 * @return {!proto.tradingpb.CtrlNode} returns this
 */
proto.tradingpb.CtrlNode.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 6, value);
};


/**
 * optional double fee = 7;
 * @return {number}
 */
proto.tradingpb.CtrlNode.prototype.getFee = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.CtrlNode} returns this
 */
proto.tradingpb.CtrlNode.prototype.setFee = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional double averageHoldingPrice = 8;
 * @return {number}
 */
proto.tradingpb.CtrlNode.prototype.getAverageholdingprice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.CtrlNode} returns this
 */
proto.tradingpb.CtrlNode.prototype.setAverageholdingprice = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional double sellPrice = 9;
 * @return {number}
 */
proto.tradingpb.CtrlNode.prototype.getSellprice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.CtrlNode} returns this
 */
proto.tradingpb.CtrlNode.prototype.setSellprice = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.WalletAsset.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.WalletAsset.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.WalletAsset} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.WalletAsset.toObject = function(includeInstance, msg) {
  var f, obj = {
    asset: (f = msg.getAsset()) && proto.tradingpb.Asset.toObject(includeInstance, f),
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.WalletAsset}
 */
proto.tradingpb.WalletAsset.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.WalletAsset;
  return proto.tradingpb.WalletAsset.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.WalletAsset} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.WalletAsset}
 */
proto.tradingpb.WalletAsset.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tradingpb.Asset;
      reader.readMessage(value,proto.tradingpb.Asset.deserializeBinaryFromReader);
      msg.setAsset(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setValue(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.WalletAsset.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.WalletAsset.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.WalletAsset} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.WalletAsset.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAsset();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tradingpb.Asset.serializeBinaryToWriter
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeDouble(
      2,
      f
    );
  }
};


/**
 * optional Asset asset = 1;
 * @return {?proto.tradingpb.Asset}
 */
proto.tradingpb.WalletAsset.prototype.getAsset = function() {
  return /** @type{?proto.tradingpb.Asset} */ (
    jspb.Message.getWrapperField(this, proto.tradingpb.Asset, 1));
};


/**
 * @param {?proto.tradingpb.Asset|undefined} value
 * @return {!proto.tradingpb.WalletAsset} returns this
*/
proto.tradingpb.WalletAsset.prototype.setAsset = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.WalletAsset} returns this
 */
proto.tradingpb.WalletAsset.prototype.clearAsset = function() {
  return this.setAsset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.WalletAsset.prototype.hasAsset = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional double value = 2;
 * @return {number}
 */
proto.tradingpb.WalletAsset.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.WalletAsset} returns this
 */
proto.tradingpb.WalletAsset.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tradingpb.Wallet.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.Wallet.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.Wallet.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.Wallet} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.Wallet.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetsList: jspb.Message.toObjectList(msg.getAssetsList(),
    proto.tradingpb.WalletAsset.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.Wallet}
 */
proto.tradingpb.Wallet.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.Wallet;
  return proto.tradingpb.Wallet.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.Wallet} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.Wallet}
 */
proto.tradingpb.Wallet.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tradingpb.WalletAsset;
      reader.readMessage(value,proto.tradingpb.WalletAsset.deserializeBinaryFromReader);
      msg.addAssets(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.Wallet.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.Wallet.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.Wallet} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.Wallet.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tradingpb.WalletAsset.serializeBinaryToWriter
    );
  }
};


/**
 * repeated WalletAsset assets = 1;
 * @return {!Array<!proto.tradingpb.WalletAsset>}
 */
proto.tradingpb.Wallet.prototype.getAssetsList = function() {
  return /** @type{!Array<!proto.tradingpb.WalletAsset>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingpb.WalletAsset, 1));
};


/**
 * @param {!Array<!proto.tradingpb.WalletAsset>} value
 * @return {!proto.tradingpb.Wallet} returns this
*/
proto.tradingpb.Wallet.prototype.setAssetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tradingpb.WalletAsset=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.WalletAsset}
 */
proto.tradingpb.Wallet.prototype.addAssets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tradingpb.WalletAsset, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.Wallet} returns this
 */
proto.tradingpb.Wallet.prototype.clearAssetsList = function() {
  return this.setAssetsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tradingpb.CtrlCondition.repeatedFields_ = [2,3,5,6,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.CtrlCondition.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.CtrlCondition.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.CtrlCondition} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.CtrlCondition.toObject = function(includeInstance, msg) {
  var f, obj = {
    indicator: jspb.Message.getFieldWithDefault(msg, 1, ""),
    valsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 2)) == null ? undefined : f,
    operatorsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    combcondition: jspb.Message.getFieldWithDefault(msg, 4, ""),
    minvalsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 5)) == null ? undefined : f,
    maxvalsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 6)) == null ? undefined : f,
    offvalsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 7)) == null ? undefined : f,
    strvalsList: (f = jspb.Message.getRepeatedField(msg, 8)) == null ? undefined : f,
    name: jspb.Message.getFieldWithDefault(msg, 9, ""),
    group: jspb.Message.getFieldWithDefault(msg, 10, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.CtrlCondition}
 */
proto.tradingpb.CtrlCondition.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.CtrlCondition;
  return proto.tradingpb.CtrlCondition.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.CtrlCondition} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.CtrlCondition}
 */
proto.tradingpb.CtrlCondition.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setIndicator(value);
      break;
    case 2:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setValsList(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addOperators(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setCombcondition(value);
      break;
    case 5:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setMinvalsList(value);
      break;
    case 6:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setMaxvalsList(value);
      break;
    case 7:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setOffvalsList(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.addStrvals(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGroup(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.CtrlCondition.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.CtrlCondition.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.CtrlCondition} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.CtrlCondition.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIndicator();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getValsList();
  if (f.length > 0) {
    writer.writePackedFloat(
      2,
      f
    );
  }
  f = message.getOperatorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getCombcondition();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMinvalsList();
  if (f.length > 0) {
    writer.writePackedFloat(
      5,
      f
    );
  }
  f = message.getMaxvalsList();
  if (f.length > 0) {
    writer.writePackedFloat(
      6,
      f
    );
  }
  f = message.getOffvalsList();
  if (f.length > 0) {
    writer.writePackedFloat(
      7,
      f
    );
  }
  f = message.getStrvalsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      8,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getGroup();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
};


/**
 * optional string indicator = 1;
 * @return {string}
 */
proto.tradingpb.CtrlCondition.prototype.getIndicator = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.CtrlCondition} returns this
 */
proto.tradingpb.CtrlCondition.prototype.setIndicator = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated float vals = 2;
 * @return {!Array<number>}
 */
proto.tradingpb.CtrlCondition.prototype.getValsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 2));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.tradingpb.CtrlCondition} returns this
 */
proto.tradingpb.CtrlCondition.prototype.setValsList = function(value) {
  return jspb.Message.setField(this, 2, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.CtrlCondition} returns this
 */
proto.tradingpb.CtrlCondition.prototype.addVals = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 2, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.CtrlCondition} returns this
 */
proto.tradingpb.CtrlCondition.prototype.clearValsList = function() {
  return this.setValsList([]);
};


/**
 * repeated string operators = 3;
 * @return {!Array<string>}
 */
proto.tradingpb.CtrlCondition.prototype.getOperatorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tradingpb.CtrlCondition} returns this
 */
proto.tradingpb.CtrlCondition.prototype.setOperatorsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.CtrlCondition} returns this
 */
proto.tradingpb.CtrlCondition.prototype.addOperators = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.CtrlCondition} returns this
 */
proto.tradingpb.CtrlCondition.prototype.clearOperatorsList = function() {
  return this.setOperatorsList([]);
};


/**
 * optional string combCondition = 4;
 * @return {string}
 */
proto.tradingpb.CtrlCondition.prototype.getCombcondition = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.CtrlCondition} returns this
 */
proto.tradingpb.CtrlCondition.prototype.setCombcondition = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * repeated float minvals = 5;
 * @return {!Array<number>}
 */
proto.tradingpb.CtrlCondition.prototype.getMinvalsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 5));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.tradingpb.CtrlCondition} returns this
 */
proto.tradingpb.CtrlCondition.prototype.setMinvalsList = function(value) {
  return jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.CtrlCondition} returns this
 */
proto.tradingpb.CtrlCondition.prototype.addMinvals = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.CtrlCondition} returns this
 */
proto.tradingpb.CtrlCondition.prototype.clearMinvalsList = function() {
  return this.setMinvalsList([]);
};


/**
 * repeated float maxvals = 6;
 * @return {!Array<number>}
 */
proto.tradingpb.CtrlCondition.prototype.getMaxvalsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 6));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.tradingpb.CtrlCondition} returns this
 */
proto.tradingpb.CtrlCondition.prototype.setMaxvalsList = function(value) {
  return jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.CtrlCondition} returns this
 */
proto.tradingpb.CtrlCondition.prototype.addMaxvals = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.CtrlCondition} returns this
 */
proto.tradingpb.CtrlCondition.prototype.clearMaxvalsList = function() {
  return this.setMaxvalsList([]);
};


/**
 * repeated float offvals = 7;
 * @return {!Array<number>}
 */
proto.tradingpb.CtrlCondition.prototype.getOffvalsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 7));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.tradingpb.CtrlCondition} returns this
 */
proto.tradingpb.CtrlCondition.prototype.setOffvalsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.CtrlCondition} returns this
 */
proto.tradingpb.CtrlCondition.prototype.addOffvals = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.CtrlCondition} returns this
 */
proto.tradingpb.CtrlCondition.prototype.clearOffvalsList = function() {
  return this.setOffvalsList([]);
};


/**
 * repeated string strVals = 8;
 * @return {!Array<string>}
 */
proto.tradingpb.CtrlCondition.prototype.getStrvalsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 8));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tradingpb.CtrlCondition} returns this
 */
proto.tradingpb.CtrlCondition.prototype.setStrvalsList = function(value) {
  return jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.CtrlCondition} returns this
 */
proto.tradingpb.CtrlCondition.prototype.addStrvals = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.CtrlCondition} returns this
 */
proto.tradingpb.CtrlCondition.prototype.clearStrvalsList = function() {
  return this.setStrvalsList([]);
};


/**
 * optional string name = 9;
 * @return {string}
 */
proto.tradingpb.CtrlCondition.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.CtrlCondition} returns this
 */
proto.tradingpb.CtrlCondition.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional int32 group = 10;
 * @return {number}
 */
proto.tradingpb.CtrlCondition.prototype.getGroup = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.CtrlCondition} returns this
 */
proto.tradingpb.CtrlCondition.prototype.setGroup = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tradingpb.IndicatorData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.IndicatorData.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.IndicatorData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.IndicatorData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.IndicatorData.toObject = function(includeInstance, msg) {
  var f, obj = {
    valsList: (f = jspb.Message.getRepeatedFloatingPointField(msg, 1)) == null ? undefined : f,
    ts: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.IndicatorData}
 */
proto.tradingpb.IndicatorData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.IndicatorData;
  return proto.tradingpb.IndicatorData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.IndicatorData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.IndicatorData}
 */
proto.tradingpb.IndicatorData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!Array<number>} */ (reader.readPackedFloat());
      msg.setValsList(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.IndicatorData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.IndicatorData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.IndicatorData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.IndicatorData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getValsList();
  if (f.length > 0) {
    writer.writePackedFloat(
      1,
      f
    );
  }
  f = message.getTs();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * repeated float vals = 1;
 * @return {!Array<number>}
 */
proto.tradingpb.IndicatorData.prototype.getValsList = function() {
  return /** @type {!Array<number>} */ (jspb.Message.getRepeatedFloatingPointField(this, 1));
};


/**
 * @param {!Array<number>} value
 * @return {!proto.tradingpb.IndicatorData} returns this
 */
proto.tradingpb.IndicatorData.prototype.setValsList = function(value) {
  return jspb.Message.setField(this, 1, value || []);
};


/**
 * @param {number} value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.IndicatorData} returns this
 */
proto.tradingpb.IndicatorData.prototype.addVals = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 1, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.IndicatorData} returns this
 */
proto.tradingpb.IndicatorData.prototype.clearValsList = function() {
  return this.setValsList([]);
};


/**
 * optional int64 ts = 2;
 * @return {number}
 */
proto.tradingpb.IndicatorData.prototype.getTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.IndicatorData} returns this
 */
proto.tradingpb.IndicatorData.prototype.setTs = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tradingpb.Indicator.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.Indicator.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.Indicator.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.Indicator} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.Indicator.toObject = function(includeInstance, msg) {
  var f, obj = {
    fullname: jspb.Message.getFieldWithDefault(msg, 1, ""),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    dataList: jspb.Message.toObjectList(msg.getDataList(),
    proto.tradingpb.IndicatorData.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.Indicator}
 */
proto.tradingpb.Indicator.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.Indicator;
  return proto.tradingpb.Indicator.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.Indicator} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.Indicator}
 */
proto.tradingpb.Indicator.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFullname(value);
      break;
    case 2:
      var value = /** @type {!proto.tradingpb.IndicatorType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = new proto.tradingpb.IndicatorData;
      reader.readMessage(value,proto.tradingpb.IndicatorData.deserializeBinaryFromReader);
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.Indicator.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.Indicator.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.Indicator} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.Indicator.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFullname();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.tradingpb.IndicatorData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string fullname = 1;
 * @return {string}
 */
proto.tradingpb.Indicator.prototype.getFullname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.Indicator} returns this
 */
proto.tradingpb.Indicator.prototype.setFullname = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional IndicatorType type = 2;
 * @return {!proto.tradingpb.IndicatorType}
 */
proto.tradingpb.Indicator.prototype.getType = function() {
  return /** @type {!proto.tradingpb.IndicatorType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.tradingpb.IndicatorType} value
 * @return {!proto.tradingpb.Indicator} returns this
 */
proto.tradingpb.Indicator.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * repeated IndicatorData data = 3;
 * @return {!Array<!proto.tradingpb.IndicatorData>}
 */
proto.tradingpb.Indicator.prototype.getDataList = function() {
  return /** @type{!Array<!proto.tradingpb.IndicatorData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingpb.IndicatorData, 3));
};


/**
 * @param {!Array<!proto.tradingpb.IndicatorData>} value
 * @return {!proto.tradingpb.Indicator} returns this
*/
proto.tradingpb.Indicator.prototype.setDataList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.tradingpb.IndicatorData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.IndicatorData}
 */
proto.tradingpb.Indicator.prototype.addData = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.tradingpb.IndicatorData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.Indicator} returns this
 */
proto.tradingpb.Indicator.prototype.clearDataList = function() {
  return this.setDataList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.BuyParams.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.BuyParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.BuyParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.BuyParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    initmoney: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    permoney: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    volume: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    aipmoney: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    perinitmoney: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    perhandmoney: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    pertotalmoney: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.BuyParams}
 */
proto.tradingpb.BuyParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.BuyParams;
  return proto.tradingpb.BuyParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.BuyParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.BuyParams}
 */
proto.tradingpb.BuyParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setInitmoney(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPermoney(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVolume(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAipmoney(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPerinitmoney(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPerhandmoney(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPertotalmoney(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.BuyParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.BuyParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.BuyParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.BuyParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitmoney();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getPermoney();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getVolume();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getAipmoney();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getPerinitmoney();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getPerhandmoney();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getPertotalmoney();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
};


/**
 * optional float initMoney = 1;
 * @return {number}
 */
proto.tradingpb.BuyParams.prototype.getInitmoney = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.BuyParams} returns this
 */
proto.tradingpb.BuyParams.prototype.setInitmoney = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float perMoney = 2;
 * @return {number}
 */
proto.tradingpb.BuyParams.prototype.getPermoney = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.BuyParams} returns this
 */
proto.tradingpb.BuyParams.prototype.setPermoney = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float volume = 3;
 * @return {number}
 */
proto.tradingpb.BuyParams.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.BuyParams} returns this
 */
proto.tradingpb.BuyParams.prototype.setVolume = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float aipMoney = 4;
 * @return {number}
 */
proto.tradingpb.BuyParams.prototype.getAipmoney = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.BuyParams} returns this
 */
proto.tradingpb.BuyParams.prototype.setAipmoney = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float perInitMoney = 5;
 * @return {number}
 */
proto.tradingpb.BuyParams.prototype.getPerinitmoney = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.BuyParams} returns this
 */
proto.tradingpb.BuyParams.prototype.setPerinitmoney = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float perHandMoney = 6;
 * @return {number}
 */
proto.tradingpb.BuyParams.prototype.getPerhandmoney = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.BuyParams} returns this
 */
proto.tradingpb.BuyParams.prototype.setPerhandmoney = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float perTotalMoney = 7;
 * @return {number}
 */
proto.tradingpb.BuyParams.prototype.getPertotalmoney = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.BuyParams} returns this
 */
proto.tradingpb.BuyParams.prototype.setPertotalmoney = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.SellParams.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.SellParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.SellParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.SellParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    volume: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    pervolume: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    money: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.SellParams}
 */
proto.tradingpb.SellParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.SellParams;
  return proto.tradingpb.SellParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.SellParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.SellParams}
 */
proto.tradingpb.SellParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVolume(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPervolume(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMoney(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.SellParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.SellParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.SellParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.SellParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVolume();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getPervolume();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getMoney();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
};


/**
 * optional float volume = 1;
 * @return {number}
 */
proto.tradingpb.SellParams.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.SellParams} returns this
 */
proto.tradingpb.SellParams.prototype.setVolume = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float perVolume = 2;
 * @return {number}
 */
proto.tradingpb.SellParams.prototype.getPervolume = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.SellParams} returns this
 */
proto.tradingpb.SellParams.prototype.setPervolume = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float money = 3;
 * @return {number}
 */
proto.tradingpb.SellParams.prototype.getMoney = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.SellParams} returns this
 */
proto.tradingpb.SellParams.prototype.setMoney = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.StopLossParams.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.StopLossParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.StopLossParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.StopLossParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    drawdown: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.StopLossParams}
 */
proto.tradingpb.StopLossParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.StopLossParams;
  return proto.tradingpb.StopLossParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.StopLossParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.StopLossParams}
 */
proto.tradingpb.StopLossParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDrawdown(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.StopLossParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.StopLossParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.StopLossParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.StopLossParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getDrawdown();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float drawdown = 1;
 * @return {number}
 */
proto.tradingpb.StopLossParams.prototype.getDrawdown = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.StopLossParams} returns this
 */
proto.tradingpb.StopLossParams.prototype.setDrawdown = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.TakeProfitParams.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.TakeProfitParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.TakeProfitParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.TakeProfitParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    profit: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.TakeProfitParams}
 */
proto.tradingpb.TakeProfitParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.TakeProfitParams;
  return proto.tradingpb.TakeProfitParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.TakeProfitParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.TakeProfitParams}
 */
proto.tradingpb.TakeProfitParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setProfit(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.TakeProfitParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.TakeProfitParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.TakeProfitParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.TakeProfitParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getProfit();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
};


/**
 * optional float profit = 1;
 * @return {number}
 */
proto.tradingpb.TakeProfitParams.prototype.getProfit = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.TakeProfitParams} returns this
 */
proto.tradingpb.TakeProfitParams.prototype.setProfit = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.InitParams.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.InitParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.InitParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.InitParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    money: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    vomume: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.InitParams}
 */
proto.tradingpb.InitParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.InitParams;
  return proto.tradingpb.InitParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.InitParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.InitParams}
 */
proto.tradingpb.InitParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMoney(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVomume(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.InitParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.InitParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.InitParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.InitParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMoney();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getVomume();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * optional float money = 1;
 * @return {number}
 */
proto.tradingpb.InitParams.prototype.getMoney = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.InitParams} returns this
 */
proto.tradingpb.InitParams.prototype.setMoney = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float vomume = 2;
 * @return {number}
 */
proto.tradingpb.InitParams.prototype.getVomume = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.InitParams} returns this
 */
proto.tradingpb.InitParams.prototype.setVomume = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.AIPParams.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.AIPParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.AIPParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.AIPParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    money: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    type: jspb.Message.getFieldWithDefault(msg, 2, 0),
    day: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.AIPParams}
 */
proto.tradingpb.AIPParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.AIPParams;
  return proto.tradingpb.AIPParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.AIPParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.AIPParams}
 */
proto.tradingpb.AIPParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMoney(value);
      break;
    case 2:
      var value = /** @type {!proto.tradingpb.AIPTimeType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setDay(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.AIPParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.AIPParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.AIPParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.AIPParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMoney();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getDay();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional float money = 1;
 * @return {number}
 */
proto.tradingpb.AIPParams.prototype.getMoney = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.AIPParams} returns this
 */
proto.tradingpb.AIPParams.prototype.setMoney = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional AIPTimeType type = 2;
 * @return {!proto.tradingpb.AIPTimeType}
 */
proto.tradingpb.AIPParams.prototype.getType = function() {
  return /** @type {!proto.tradingpb.AIPTimeType} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {!proto.tradingpb.AIPTimeType} value
 * @return {!proto.tradingpb.AIPParams} returns this
 */
proto.tradingpb.AIPParams.prototype.setType = function(value) {
  return jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional int32 day = 3;
 * @return {number}
 */
proto.tradingpb.AIPParams.prototype.getDay = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.AIPParams} returns this
 */
proto.tradingpb.AIPParams.prototype.setDay = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tradingpb.Strategy.repeatedFields_ = [3,4,5,6,14];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.Strategy.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.Strategy.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.Strategy} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.Strategy.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    asset: (f = msg.getAsset()) && proto.tradingpb.Asset.toObject(includeInstance, f),
    buyList: jspb.Message.toObjectList(msg.getBuyList(),
    proto.tradingpb.CtrlCondition.toObject, includeInstance),
    sellList: jspb.Message.toObjectList(msg.getSellList(),
    proto.tradingpb.CtrlCondition.toObject, includeInstance),
    stoplossList: jspb.Message.toObjectList(msg.getStoplossList(),
    proto.tradingpb.CtrlCondition.toObject, includeInstance),
    takeprofitList: jspb.Message.toObjectList(msg.getTakeprofitList(),
    proto.tradingpb.CtrlCondition.toObject, includeInstance),
    paramsbuy: (f = msg.getParamsbuy()) && proto.tradingpb.BuyParams.toObject(includeInstance, f),
    paramssell: (f = msg.getParamssell()) && proto.tradingpb.SellParams.toObject(includeInstance, f),
    paramsstoploss: (f = msg.getParamsstoploss()) && proto.tradingpb.StopLossParams.toObject(includeInstance, f),
    paramstakeprofit: (f = msg.getParamstakeprofit()) && proto.tradingpb.TakeProfitParams.toObject(includeInstance, f),
    paramsinit: (f = msg.getParamsinit()) && proto.tradingpb.InitParams.toObject(includeInstance, f),
    paramsaip: (f = msg.getParamsaip()) && proto.tradingpb.AIPParams.toObject(includeInstance, f),
    title: jspb.Message.getFieldWithDefault(msg, 13, ""),
    indicatorsList: (f = jspb.Message.getRepeatedField(msg, 14)) == null ? undefined : f
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.Strategy}
 */
proto.tradingpb.Strategy.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.Strategy;
  return proto.tradingpb.Strategy.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.Strategy} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.Strategy}
 */
proto.tradingpb.Strategy.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.tradingpb.Asset;
      reader.readMessage(value,proto.tradingpb.Asset.deserializeBinaryFromReader);
      msg.setAsset(value);
      break;
    case 3:
      var value = new proto.tradingpb.CtrlCondition;
      reader.readMessage(value,proto.tradingpb.CtrlCondition.deserializeBinaryFromReader);
      msg.addBuy(value);
      break;
    case 4:
      var value = new proto.tradingpb.CtrlCondition;
      reader.readMessage(value,proto.tradingpb.CtrlCondition.deserializeBinaryFromReader);
      msg.addSell(value);
      break;
    case 5:
      var value = new proto.tradingpb.CtrlCondition;
      reader.readMessage(value,proto.tradingpb.CtrlCondition.deserializeBinaryFromReader);
      msg.addStoploss(value);
      break;
    case 6:
      var value = new proto.tradingpb.CtrlCondition;
      reader.readMessage(value,proto.tradingpb.CtrlCondition.deserializeBinaryFromReader);
      msg.addTakeprofit(value);
      break;
    case 7:
      var value = new proto.tradingpb.BuyParams;
      reader.readMessage(value,proto.tradingpb.BuyParams.deserializeBinaryFromReader);
      msg.setParamsbuy(value);
      break;
    case 8:
      var value = new proto.tradingpb.SellParams;
      reader.readMessage(value,proto.tradingpb.SellParams.deserializeBinaryFromReader);
      msg.setParamssell(value);
      break;
    case 9:
      var value = new proto.tradingpb.StopLossParams;
      reader.readMessage(value,proto.tradingpb.StopLossParams.deserializeBinaryFromReader);
      msg.setParamsstoploss(value);
      break;
    case 10:
      var value = new proto.tradingpb.TakeProfitParams;
      reader.readMessage(value,proto.tradingpb.TakeProfitParams.deserializeBinaryFromReader);
      msg.setParamstakeprofit(value);
      break;
    case 11:
      var value = new proto.tradingpb.InitParams;
      reader.readMessage(value,proto.tradingpb.InitParams.deserializeBinaryFromReader);
      msg.setParamsinit(value);
      break;
    case 12:
      var value = new proto.tradingpb.AIPParams;
      reader.readMessage(value,proto.tradingpb.AIPParams.deserializeBinaryFromReader);
      msg.setParamsaip(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 14:
      var value = /** @type {string} */ (reader.readString());
      msg.addIndicators(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.Strategy.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.Strategy.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.Strategy} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.Strategy.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAsset();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tradingpb.Asset.serializeBinaryToWriter
    );
  }
  f = message.getBuyList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.tradingpb.CtrlCondition.serializeBinaryToWriter
    );
  }
  f = message.getSellList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.tradingpb.CtrlCondition.serializeBinaryToWriter
    );
  }
  f = message.getStoplossList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.tradingpb.CtrlCondition.serializeBinaryToWriter
    );
  }
  f = message.getTakeprofitList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.tradingpb.CtrlCondition.serializeBinaryToWriter
    );
  }
  f = message.getParamsbuy();
  if (f != null) {
    writer.writeMessage(
      7,
      f,
      proto.tradingpb.BuyParams.serializeBinaryToWriter
    );
  }
  f = message.getParamssell();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      proto.tradingpb.SellParams.serializeBinaryToWriter
    );
  }
  f = message.getParamsstoploss();
  if (f != null) {
    writer.writeMessage(
      9,
      f,
      proto.tradingpb.StopLossParams.serializeBinaryToWriter
    );
  }
  f = message.getParamstakeprofit();
  if (f != null) {
    writer.writeMessage(
      10,
      f,
      proto.tradingpb.TakeProfitParams.serializeBinaryToWriter
    );
  }
  f = message.getParamsinit();
  if (f != null) {
    writer.writeMessage(
      11,
      f,
      proto.tradingpb.InitParams.serializeBinaryToWriter
    );
  }
  f = message.getParamsaip();
  if (f != null) {
    writer.writeMessage(
      12,
      f,
      proto.tradingpb.AIPParams.serializeBinaryToWriter
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
  f = message.getIndicatorsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      14,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tradingpb.Strategy.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.Strategy} returns this
 */
proto.tradingpb.Strategy.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Asset asset = 2;
 * @return {?proto.tradingpb.Asset}
 */
proto.tradingpb.Strategy.prototype.getAsset = function() {
  return /** @type{?proto.tradingpb.Asset} */ (
    jspb.Message.getWrapperField(this, proto.tradingpb.Asset, 2));
};


/**
 * @param {?proto.tradingpb.Asset|undefined} value
 * @return {!proto.tradingpb.Strategy} returns this
*/
proto.tradingpb.Strategy.prototype.setAsset = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.Strategy} returns this
 */
proto.tradingpb.Strategy.prototype.clearAsset = function() {
  return this.setAsset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.Strategy.prototype.hasAsset = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated CtrlCondition buy = 3;
 * @return {!Array<!proto.tradingpb.CtrlCondition>}
 */
proto.tradingpb.Strategy.prototype.getBuyList = function() {
  return /** @type{!Array<!proto.tradingpb.CtrlCondition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingpb.CtrlCondition, 3));
};


/**
 * @param {!Array<!proto.tradingpb.CtrlCondition>} value
 * @return {!proto.tradingpb.Strategy} returns this
*/
proto.tradingpb.Strategy.prototype.setBuyList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.tradingpb.CtrlCondition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.CtrlCondition}
 */
proto.tradingpb.Strategy.prototype.addBuy = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.tradingpb.CtrlCondition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.Strategy} returns this
 */
proto.tradingpb.Strategy.prototype.clearBuyList = function() {
  return this.setBuyList([]);
};


/**
 * repeated CtrlCondition sell = 4;
 * @return {!Array<!proto.tradingpb.CtrlCondition>}
 */
proto.tradingpb.Strategy.prototype.getSellList = function() {
  return /** @type{!Array<!proto.tradingpb.CtrlCondition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingpb.CtrlCondition, 4));
};


/**
 * @param {!Array<!proto.tradingpb.CtrlCondition>} value
 * @return {!proto.tradingpb.Strategy} returns this
*/
proto.tradingpb.Strategy.prototype.setSellList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.tradingpb.CtrlCondition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.CtrlCondition}
 */
proto.tradingpb.Strategy.prototype.addSell = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.tradingpb.CtrlCondition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.Strategy} returns this
 */
proto.tradingpb.Strategy.prototype.clearSellList = function() {
  return this.setSellList([]);
};


/**
 * repeated CtrlCondition stoploss = 5;
 * @return {!Array<!proto.tradingpb.CtrlCondition>}
 */
proto.tradingpb.Strategy.prototype.getStoplossList = function() {
  return /** @type{!Array<!proto.tradingpb.CtrlCondition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingpb.CtrlCondition, 5));
};


/**
 * @param {!Array<!proto.tradingpb.CtrlCondition>} value
 * @return {!proto.tradingpb.Strategy} returns this
*/
proto.tradingpb.Strategy.prototype.setStoplossList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.tradingpb.CtrlCondition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.CtrlCondition}
 */
proto.tradingpb.Strategy.prototype.addStoploss = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.tradingpb.CtrlCondition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.Strategy} returns this
 */
proto.tradingpb.Strategy.prototype.clearStoplossList = function() {
  return this.setStoplossList([]);
};


/**
 * repeated CtrlCondition takeprofit = 6;
 * @return {!Array<!proto.tradingpb.CtrlCondition>}
 */
proto.tradingpb.Strategy.prototype.getTakeprofitList = function() {
  return /** @type{!Array<!proto.tradingpb.CtrlCondition>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingpb.CtrlCondition, 6));
};


/**
 * @param {!Array<!proto.tradingpb.CtrlCondition>} value
 * @return {!proto.tradingpb.Strategy} returns this
*/
proto.tradingpb.Strategy.prototype.setTakeprofitList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.tradingpb.CtrlCondition=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.CtrlCondition}
 */
proto.tradingpb.Strategy.prototype.addTakeprofit = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.tradingpb.CtrlCondition, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.Strategy} returns this
 */
proto.tradingpb.Strategy.prototype.clearTakeprofitList = function() {
  return this.setTakeprofitList([]);
};


/**
 * optional BuyParams paramsBuy = 7;
 * @return {?proto.tradingpb.BuyParams}
 */
proto.tradingpb.Strategy.prototype.getParamsbuy = function() {
  return /** @type{?proto.tradingpb.BuyParams} */ (
    jspb.Message.getWrapperField(this, proto.tradingpb.BuyParams, 7));
};


/**
 * @param {?proto.tradingpb.BuyParams|undefined} value
 * @return {!proto.tradingpb.Strategy} returns this
*/
proto.tradingpb.Strategy.prototype.setParamsbuy = function(value) {
  return jspb.Message.setWrapperField(this, 7, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.Strategy} returns this
 */
proto.tradingpb.Strategy.prototype.clearParamsbuy = function() {
  return this.setParamsbuy(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.Strategy.prototype.hasParamsbuy = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional SellParams paramsSell = 8;
 * @return {?proto.tradingpb.SellParams}
 */
proto.tradingpb.Strategy.prototype.getParamssell = function() {
  return /** @type{?proto.tradingpb.SellParams} */ (
    jspb.Message.getWrapperField(this, proto.tradingpb.SellParams, 8));
};


/**
 * @param {?proto.tradingpb.SellParams|undefined} value
 * @return {!proto.tradingpb.Strategy} returns this
*/
proto.tradingpb.Strategy.prototype.setParamssell = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.Strategy} returns this
 */
proto.tradingpb.Strategy.prototype.clearParamssell = function() {
  return this.setParamssell(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.Strategy.prototype.hasParamssell = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * optional StopLossParams paramsStopLoss = 9;
 * @return {?proto.tradingpb.StopLossParams}
 */
proto.tradingpb.Strategy.prototype.getParamsstoploss = function() {
  return /** @type{?proto.tradingpb.StopLossParams} */ (
    jspb.Message.getWrapperField(this, proto.tradingpb.StopLossParams, 9));
};


/**
 * @param {?proto.tradingpb.StopLossParams|undefined} value
 * @return {!proto.tradingpb.Strategy} returns this
*/
proto.tradingpb.Strategy.prototype.setParamsstoploss = function(value) {
  return jspb.Message.setWrapperField(this, 9, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.Strategy} returns this
 */
proto.tradingpb.Strategy.prototype.clearParamsstoploss = function() {
  return this.setParamsstoploss(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.Strategy.prototype.hasParamsstoploss = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * optional TakeProfitParams paramsTakeProfit = 10;
 * @return {?proto.tradingpb.TakeProfitParams}
 */
proto.tradingpb.Strategy.prototype.getParamstakeprofit = function() {
  return /** @type{?proto.tradingpb.TakeProfitParams} */ (
    jspb.Message.getWrapperField(this, proto.tradingpb.TakeProfitParams, 10));
};


/**
 * @param {?proto.tradingpb.TakeProfitParams|undefined} value
 * @return {!proto.tradingpb.Strategy} returns this
*/
proto.tradingpb.Strategy.prototype.setParamstakeprofit = function(value) {
  return jspb.Message.setWrapperField(this, 10, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.Strategy} returns this
 */
proto.tradingpb.Strategy.prototype.clearParamstakeprofit = function() {
  return this.setParamstakeprofit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.Strategy.prototype.hasParamstakeprofit = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * optional InitParams paramsInit = 11;
 * @return {?proto.tradingpb.InitParams}
 */
proto.tradingpb.Strategy.prototype.getParamsinit = function() {
  return /** @type{?proto.tradingpb.InitParams} */ (
    jspb.Message.getWrapperField(this, proto.tradingpb.InitParams, 11));
};


/**
 * @param {?proto.tradingpb.InitParams|undefined} value
 * @return {!proto.tradingpb.Strategy} returns this
*/
proto.tradingpb.Strategy.prototype.setParamsinit = function(value) {
  return jspb.Message.setWrapperField(this, 11, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.Strategy} returns this
 */
proto.tradingpb.Strategy.prototype.clearParamsinit = function() {
  return this.setParamsinit(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.Strategy.prototype.hasParamsinit = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * optional AIPParams paramsAIP = 12;
 * @return {?proto.tradingpb.AIPParams}
 */
proto.tradingpb.Strategy.prototype.getParamsaip = function() {
  return /** @type{?proto.tradingpb.AIPParams} */ (
    jspb.Message.getWrapperField(this, proto.tradingpb.AIPParams, 12));
};


/**
 * @param {?proto.tradingpb.AIPParams|undefined} value
 * @return {!proto.tradingpb.Strategy} returns this
*/
proto.tradingpb.Strategy.prototype.setParamsaip = function(value) {
  return jspb.Message.setWrapperField(this, 12, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.Strategy} returns this
 */
proto.tradingpb.Strategy.prototype.clearParamsaip = function() {
  return this.setParamsaip(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.Strategy.prototype.hasParamsaip = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional string title = 13;
 * @return {string}
 */
proto.tradingpb.Strategy.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.Strategy} returns this
 */
proto.tradingpb.Strategy.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


/**
 * repeated string indicators = 14;
 * @return {!Array<string>}
 */
proto.tradingpb.Strategy.prototype.getIndicatorsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 14));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tradingpb.Strategy} returns this
 */
proto.tradingpb.Strategy.prototype.setIndicatorsList = function(value) {
  return jspb.Message.setField(this, 14, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.Strategy} returns this
 */
proto.tradingpb.Strategy.prototype.addIndicators = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 14, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.Strategy} returns this
 */
proto.tradingpb.Strategy.prototype.clearIndicatorsList = function() {
  return this.setIndicatorsList([]);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tradingpb.PNLDataValue.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.PNLDataValue.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.PNLDataValue.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.PNLDataValue} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.PNLDataValue.toObject = function(includeInstance, msg) {
  var f, obj = {
    ts: jspb.Message.getFieldWithDefault(msg, 1, 0),
    pervalue: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    cost: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    value: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    volume: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    price: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.PNLDataValue}
 */
proto.tradingpb.PNLDataValue.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.PNLDataValue;
  return proto.tradingpb.PNLDataValue.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.PNLDataValue} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.PNLDataValue}
 */
proto.tradingpb.PNLDataValue.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPervalue(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCost(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setValue(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVolume(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPrice(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.PNLDataValue.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.PNLDataValue.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.PNLDataValue} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.PNLDataValue.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTs();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getPervalue();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getCost();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getValue();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getVolume();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getPrice();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
};


/**
 * optional int64 ts = 1;
 * @return {number}
 */
proto.tradingpb.PNLDataValue.prototype.getTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLDataValue} returns this
 */
proto.tradingpb.PNLDataValue.prototype.setTs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional float perValue = 2;
 * @return {number}
 */
proto.tradingpb.PNLDataValue.prototype.getPervalue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLDataValue} returns this
 */
proto.tradingpb.PNLDataValue.prototype.setPervalue = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * repeated string tags = 3;
 * @return {!Array<string>}
 */
proto.tradingpb.PNLDataValue.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tradingpb.PNLDataValue} returns this
 */
proto.tradingpb.PNLDataValue.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.PNLDataValue} returns this
 */
proto.tradingpb.PNLDataValue.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.PNLDataValue} returns this
 */
proto.tradingpb.PNLDataValue.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * optional float cost = 4;
 * @return {number}
 */
proto.tradingpb.PNLDataValue.prototype.getCost = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLDataValue} returns this
 */
proto.tradingpb.PNLDataValue.prototype.setCost = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float value = 5;
 * @return {number}
 */
proto.tradingpb.PNLDataValue.prototype.getValue = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLDataValue} returns this
 */
proto.tradingpb.PNLDataValue.prototype.setValue = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float volume = 6;
 * @return {number}
 */
proto.tradingpb.PNLDataValue.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLDataValue} returns this
 */
proto.tradingpb.PNLDataValue.prototype.setVolume = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float price = 7;
 * @return {number}
 */
proto.tradingpb.PNLDataValue.prototype.getPrice = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLDataValue} returns this
 */
proto.tradingpb.PNLDataValue.prototype.setPrice = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tradingpb.PNLAssetData.repeatedFields_ = [2,33,34];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.PNLAssetData.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.PNLAssetData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.PNLAssetData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.PNLAssetData.toObject = function(includeInstance, msg) {
  var f, obj = {
    asset: (f = msg.getAsset()) && proto.tradingpb.Asset.toObject(includeInstance, f),
    valuesList: jspb.Message.toObjectList(msg.getValuesList(),
    proto.tradingpb.PNLDataValue.toObject, includeInstance),
    maxdrawdown: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    maxdrawdownstartts: jspb.Message.getFieldWithDefault(msg, 4, 0),
    maxdrawdownendts: jspb.Message.getFieldWithDefault(msg, 5, 0),
    maxdrawup: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    maxdrawupstartts: jspb.Message.getFieldWithDefault(msg, 7, 0),
    maxdrawupendts: jspb.Message.getFieldWithDefault(msg, 8, 0),
    sharpe: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    annualizedreturns: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    annualizedvolatility: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    totalreturns: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    variance: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    buytimes: jspb.Message.getFieldWithDefault(msg, 14, 0),
    selltimes: jspb.Message.getFieldWithDefault(msg, 15, 0),
    stoplosstimes: jspb.Message.getFieldWithDefault(msg, 16, 0),
    maxupdayts: jspb.Message.getFieldWithDefault(msg, 17, 0),
    maxperupday: jspb.Message.getFloatingPointFieldWithDefault(msg, 18, 0.0),
    maxdowndayts: jspb.Message.getFieldWithDefault(msg, 19, 0),
    maxperdownday: jspb.Message.getFloatingPointFieldWithDefault(msg, 20, 0.0),
    maxupweekts: jspb.Message.getFieldWithDefault(msg, 21, 0),
    maxperupweek: jspb.Message.getFloatingPointFieldWithDefault(msg, 22, 0.0),
    maxdownweekts: jspb.Message.getFieldWithDefault(msg, 23, 0),
    maxperdownweek: jspb.Message.getFloatingPointFieldWithDefault(msg, 24, 0.0),
    maxupmonthts: jspb.Message.getFieldWithDefault(msg, 25, 0),
    maxperupmonth: jspb.Message.getFloatingPointFieldWithDefault(msg, 26, 0.0),
    maxdownmonthts: jspb.Message.getFieldWithDefault(msg, 27, 0),
    maxperdownmonth: jspb.Message.getFloatingPointFieldWithDefault(msg, 28, 0.0),
    maxupyearts: jspb.Message.getFieldWithDefault(msg, 29, 0),
    maxperupyear: jspb.Message.getFloatingPointFieldWithDefault(msg, 30, 0.0),
    maxdownyearts: jspb.Message.getFieldWithDefault(msg, 31, 0),
    maxperdownyear: jspb.Message.getFloatingPointFieldWithDefault(msg, 32, 0.0),
    lstctrlList: jspb.Message.toObjectList(msg.getLstctrlList(),
    proto.tradingpb.CtrlNode.toObject, includeInstance),
    indicatorsList: jspb.Message.toObjectList(msg.getIndicatorsList(),
    proto.tradingpb.Indicator.toObject, includeInstance),
    wintimes: jspb.Message.getFieldWithDefault(msg, 35, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.PNLAssetData}
 */
proto.tradingpb.PNLAssetData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.PNLAssetData;
  return proto.tradingpb.PNLAssetData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.PNLAssetData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.PNLAssetData}
 */
proto.tradingpb.PNLAssetData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tradingpb.Asset;
      reader.readMessage(value,proto.tradingpb.Asset.deserializeBinaryFromReader);
      msg.setAsset(value);
      break;
    case 2:
      var value = new proto.tradingpb.PNLDataValue;
      reader.readMessage(value,proto.tradingpb.PNLDataValue.deserializeBinaryFromReader);
      msg.addValues(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxdrawdown(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxdrawdownstartts(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxdrawdownendts(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxdrawup(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxdrawupstartts(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxdrawupendts(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSharpe(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAnnualizedreturns(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAnnualizedvolatility(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTotalreturns(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVariance(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBuytimes(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSelltimes(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setStoplosstimes(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxupdayts(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxperupday(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxdowndayts(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxperdownday(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxupweekts(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxperupweek(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxdownweekts(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxperdownweek(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxupmonthts(value);
      break;
    case 26:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxperupmonth(value);
      break;
    case 27:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxdownmonthts(value);
      break;
    case 28:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxperdownmonth(value);
      break;
    case 29:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxupyearts(value);
      break;
    case 30:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxperupyear(value);
      break;
    case 31:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setMaxdownyearts(value);
      break;
    case 32:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxperdownyear(value);
      break;
    case 33:
      var value = new proto.tradingpb.CtrlNode;
      reader.readMessage(value,proto.tradingpb.CtrlNode.deserializeBinaryFromReader);
      msg.addLstctrl(value);
      break;
    case 34:
      var value = new proto.tradingpb.Indicator;
      reader.readMessage(value,proto.tradingpb.Indicator.deserializeBinaryFromReader);
      msg.addIndicators(value);
      break;
    case 35:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setWintimes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.PNLAssetData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.PNLAssetData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.PNLAssetData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.PNLAssetData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAsset();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tradingpb.Asset.serializeBinaryToWriter
    );
  }
  f = message.getValuesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.tradingpb.PNLDataValue.serializeBinaryToWriter
    );
  }
  f = message.getMaxdrawdown();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getMaxdrawdownstartts();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getMaxdrawdownendts();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getMaxdrawup();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getMaxdrawupstartts();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getMaxdrawupendts();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getSharpe();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getAnnualizedreturns();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getAnnualizedvolatility();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getTotalreturns();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getVariance();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = message.getBuytimes();
  if (f !== 0) {
    writer.writeInt32(
      14,
      f
    );
  }
  f = message.getSelltimes();
  if (f !== 0) {
    writer.writeInt32(
      15,
      f
    );
  }
  f = message.getStoplosstimes();
  if (f !== 0) {
    writer.writeInt32(
      16,
      f
    );
  }
  f = message.getMaxupdayts();
  if (f !== 0) {
    writer.writeInt64(
      17,
      f
    );
  }
  f = message.getMaxperupday();
  if (f !== 0.0) {
    writer.writeFloat(
      18,
      f
    );
  }
  f = message.getMaxdowndayts();
  if (f !== 0) {
    writer.writeInt64(
      19,
      f
    );
  }
  f = message.getMaxperdownday();
  if (f !== 0.0) {
    writer.writeFloat(
      20,
      f
    );
  }
  f = message.getMaxupweekts();
  if (f !== 0) {
    writer.writeInt64(
      21,
      f
    );
  }
  f = message.getMaxperupweek();
  if (f !== 0.0) {
    writer.writeFloat(
      22,
      f
    );
  }
  f = message.getMaxdownweekts();
  if (f !== 0) {
    writer.writeInt64(
      23,
      f
    );
  }
  f = message.getMaxperdownweek();
  if (f !== 0.0) {
    writer.writeFloat(
      24,
      f
    );
  }
  f = message.getMaxupmonthts();
  if (f !== 0) {
    writer.writeInt64(
      25,
      f
    );
  }
  f = message.getMaxperupmonth();
  if (f !== 0.0) {
    writer.writeFloat(
      26,
      f
    );
  }
  f = message.getMaxdownmonthts();
  if (f !== 0) {
    writer.writeInt64(
      27,
      f
    );
  }
  f = message.getMaxperdownmonth();
  if (f !== 0.0) {
    writer.writeFloat(
      28,
      f
    );
  }
  f = message.getMaxupyearts();
  if (f !== 0) {
    writer.writeInt64(
      29,
      f
    );
  }
  f = message.getMaxperupyear();
  if (f !== 0.0) {
    writer.writeFloat(
      30,
      f
    );
  }
  f = message.getMaxdownyearts();
  if (f !== 0) {
    writer.writeInt64(
      31,
      f
    );
  }
  f = message.getMaxperdownyear();
  if (f !== 0.0) {
    writer.writeFloat(
      32,
      f
    );
  }
  f = message.getLstctrlList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      33,
      f,
      proto.tradingpb.CtrlNode.serializeBinaryToWriter
    );
  }
  f = message.getIndicatorsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      34,
      f,
      proto.tradingpb.Indicator.serializeBinaryToWriter
    );
  }
  f = message.getWintimes();
  if (f !== 0) {
    writer.writeInt32(
      35,
      f
    );
  }
};


/**
 * optional Asset asset = 1;
 * @return {?proto.tradingpb.Asset}
 */
proto.tradingpb.PNLAssetData.prototype.getAsset = function() {
  return /** @type{?proto.tradingpb.Asset} */ (
    jspb.Message.getWrapperField(this, proto.tradingpb.Asset, 1));
};


/**
 * @param {?proto.tradingpb.Asset|undefined} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
*/
proto.tradingpb.PNLAssetData.prototype.setAsset = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.clearAsset = function() {
  return this.setAsset(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.PNLAssetData.prototype.hasAsset = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated PNLDataValue values = 2;
 * @return {!Array<!proto.tradingpb.PNLDataValue>}
 */
proto.tradingpb.PNLAssetData.prototype.getValuesList = function() {
  return /** @type{!Array<!proto.tradingpb.PNLDataValue>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingpb.PNLDataValue, 2));
};


/**
 * @param {!Array<!proto.tradingpb.PNLDataValue>} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
*/
proto.tradingpb.PNLAssetData.prototype.setValuesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.tradingpb.PNLDataValue=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.PNLDataValue}
 */
proto.tradingpb.PNLAssetData.prototype.addValues = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tradingpb.PNLDataValue, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.clearValuesList = function() {
  return this.setValuesList([]);
};


/**
 * optional float maxDrawdown = 3;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getMaxdrawdown = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setMaxdrawdown = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional int64 maxDrawdownStartTs = 4;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getMaxdrawdownstartts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setMaxdrawdownstartts = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 maxDrawdownEndTs = 5;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getMaxdrawdownendts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setMaxdrawdownendts = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional float maxDrawup = 6;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getMaxdrawup = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setMaxdrawup = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional int64 maxDrawupStartTs = 7;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getMaxdrawupstartts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setMaxdrawupstartts = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 maxDrawupEndTs = 8;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getMaxdrawupendts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setMaxdrawupendts = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional float sharpe = 9;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getSharpe = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setSharpe = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional float annualizedReturns = 10;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getAnnualizedreturns = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setAnnualizedreturns = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional float annualizedVolatility = 11;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getAnnualizedvolatility = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setAnnualizedvolatility = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional float totalReturns = 12;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getTotalreturns = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setTotalreturns = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional float variance = 13;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getVariance = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setVariance = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional int32 buyTimes = 14;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getBuytimes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setBuytimes = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional int32 sellTimes = 15;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getSelltimes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 15, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setSelltimes = function(value) {
  return jspb.Message.setProto3IntField(this, 15, value);
};


/**
 * optional int32 stoplossTimes = 16;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getStoplosstimes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setStoplosstimes = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int64 maxUpDayTs = 17;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getMaxupdayts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setMaxupdayts = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional float maxPerUpDay = 18;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getMaxperupday = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 18, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setMaxperupday = function(value) {
  return jspb.Message.setProto3FloatField(this, 18, value);
};


/**
 * optional int64 maxDownDayTs = 19;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getMaxdowndayts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setMaxdowndayts = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional float maxPerDownDay = 20;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getMaxperdownday = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 20, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setMaxperdownday = function(value) {
  return jspb.Message.setProto3FloatField(this, 20, value);
};


/**
 * optional int64 maxUpWeekTs = 21;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getMaxupweekts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setMaxupweekts = function(value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional float maxPerUpWeek = 22;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getMaxperupweek = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 22, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setMaxperupweek = function(value) {
  return jspb.Message.setProto3FloatField(this, 22, value);
};


/**
 * optional int64 maxDownWeekTs = 23;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getMaxdownweekts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setMaxdownweekts = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional float maxPerDownWeek = 24;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getMaxperdownweek = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 24, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setMaxperdownweek = function(value) {
  return jspb.Message.setProto3FloatField(this, 24, value);
};


/**
 * optional int64 maxUpMonthTs = 25;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getMaxupmonthts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setMaxupmonthts = function(value) {
  return jspb.Message.setProto3IntField(this, 25, value);
};


/**
 * optional float maxPerUpMonth = 26;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getMaxperupmonth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 26, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setMaxperupmonth = function(value) {
  return jspb.Message.setProto3FloatField(this, 26, value);
};


/**
 * optional int64 maxDownMonthTs = 27;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getMaxdownmonthts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 27, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setMaxdownmonthts = function(value) {
  return jspb.Message.setProto3IntField(this, 27, value);
};


/**
 * optional float maxPerDownMonth = 28;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getMaxperdownmonth = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 28, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setMaxperdownmonth = function(value) {
  return jspb.Message.setProto3FloatField(this, 28, value);
};


/**
 * optional int64 maxUpYearTs = 29;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getMaxupyearts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 29, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setMaxupyearts = function(value) {
  return jspb.Message.setProto3IntField(this, 29, value);
};


/**
 * optional float maxPerUpYear = 30;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getMaxperupyear = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 30, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setMaxperupyear = function(value) {
  return jspb.Message.setProto3FloatField(this, 30, value);
};


/**
 * optional int64 maxDownYearTs = 31;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getMaxdownyearts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 31, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setMaxdownyearts = function(value) {
  return jspb.Message.setProto3IntField(this, 31, value);
};


/**
 * optional float maxPerDownYear = 32;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getMaxperdownyear = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 32, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setMaxperdownyear = function(value) {
  return jspb.Message.setProto3FloatField(this, 32, value);
};


/**
 * repeated CtrlNode lstCtrl = 33;
 * @return {!Array<!proto.tradingpb.CtrlNode>}
 */
proto.tradingpb.PNLAssetData.prototype.getLstctrlList = function() {
  return /** @type{!Array<!proto.tradingpb.CtrlNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingpb.CtrlNode, 33));
};


/**
 * @param {!Array<!proto.tradingpb.CtrlNode>} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
*/
proto.tradingpb.PNLAssetData.prototype.setLstctrlList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 33, value);
};


/**
 * @param {!proto.tradingpb.CtrlNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.CtrlNode}
 */
proto.tradingpb.PNLAssetData.prototype.addLstctrl = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 33, opt_value, proto.tradingpb.CtrlNode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.clearLstctrlList = function() {
  return this.setLstctrlList([]);
};


/**
 * repeated Indicator indicators = 34;
 * @return {!Array<!proto.tradingpb.Indicator>}
 */
proto.tradingpb.PNLAssetData.prototype.getIndicatorsList = function() {
  return /** @type{!Array<!proto.tradingpb.Indicator>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingpb.Indicator, 34));
};


/**
 * @param {!Array<!proto.tradingpb.Indicator>} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
*/
proto.tradingpb.PNLAssetData.prototype.setIndicatorsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 34, value);
};


/**
 * @param {!proto.tradingpb.Indicator=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.Indicator}
 */
proto.tradingpb.PNLAssetData.prototype.addIndicators = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 34, opt_value, proto.tradingpb.Indicator, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.clearIndicatorsList = function() {
  return this.setIndicatorsList([]);
};


/**
 * optional int32 winTimes = 35;
 * @return {number}
 */
proto.tradingpb.PNLAssetData.prototype.getWintimes = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 35, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLAssetData} returns this
 */
proto.tradingpb.PNLAssetData.prototype.setWintimes = function(value) {
  return jspb.Message.setProto3IntField(this, 35, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tradingpb.PNLData.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.PNLData.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.PNLData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.PNLData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.PNLData.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    total: (f = msg.getTotal()) && proto.tradingpb.PNLAssetData.toObject(includeInstance, f),
    assetsList: jspb.Message.toObjectList(msg.getAssetsList(),
    proto.tradingpb.PNLAssetData.toObject, includeInstance),
    title: jspb.Message.getFieldWithDefault(msg, 4, ""),
    lastts: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.PNLData}
 */
proto.tradingpb.PNLData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.PNLData;
  return proto.tradingpb.PNLData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.PNLData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.PNLData}
 */
proto.tradingpb.PNLData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.tradingpb.PNLAssetData;
      reader.readMessage(value,proto.tradingpb.PNLAssetData.deserializeBinaryFromReader);
      msg.setTotal(value);
      break;
    case 3:
      var value = new proto.tradingpb.PNLAssetData;
      reader.readMessage(value,proto.tradingpb.PNLAssetData.deserializeBinaryFromReader);
      msg.addAssets(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.PNLData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.PNLData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.PNLData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.PNLData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getTotal();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tradingpb.PNLAssetData.serializeBinaryToWriter
    );
  }
  f = message.getAssetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.tradingpb.PNLAssetData.serializeBinaryToWriter
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getLastts();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tradingpb.PNLData.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.PNLData} returns this
 */
proto.tradingpb.PNLData.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional PNLAssetData total = 2;
 * @return {?proto.tradingpb.PNLAssetData}
 */
proto.tradingpb.PNLData.prototype.getTotal = function() {
  return /** @type{?proto.tradingpb.PNLAssetData} */ (
    jspb.Message.getWrapperField(this, proto.tradingpb.PNLAssetData, 2));
};


/**
 * @param {?proto.tradingpb.PNLAssetData|undefined} value
 * @return {!proto.tradingpb.PNLData} returns this
*/
proto.tradingpb.PNLData.prototype.setTotal = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.PNLData} returns this
 */
proto.tradingpb.PNLData.prototype.clearTotal = function() {
  return this.setTotal(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.PNLData.prototype.hasTotal = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * repeated PNLAssetData assets = 3;
 * @return {!Array<!proto.tradingpb.PNLAssetData>}
 */
proto.tradingpb.PNLData.prototype.getAssetsList = function() {
  return /** @type{!Array<!proto.tradingpb.PNLAssetData>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingpb.PNLAssetData, 3));
};


/**
 * @param {!Array<!proto.tradingpb.PNLAssetData>} value
 * @return {!proto.tradingpb.PNLData} returns this
*/
proto.tradingpb.PNLData.prototype.setAssetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.tradingpb.PNLAssetData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.PNLAssetData}
 */
proto.tradingpb.PNLData.prototype.addAssets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.tradingpb.PNLAssetData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.PNLData} returns this
 */
proto.tradingpb.PNLData.prototype.clearAssetsList = function() {
  return this.setAssetsList([]);
};


/**
 * optional string title = 4;
 * @return {string}
 */
proto.tradingpb.PNLData.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.PNLData} returns this
 */
proto.tradingpb.PNLData.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 lastts = 5;
 * @return {number}
 */
proto.tradingpb.PNLData.prototype.getLastts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.PNLData} returns this
 */
proto.tradingpb.PNLData.prototype.setLastts = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tradingpb.SimTradingParams.repeatedFields_ = [1,2,5];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.SimTradingParams.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.SimTradingParams.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.SimTradingParams} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.SimTradingParams.toObject = function(includeInstance, msg) {
  var f, obj = {
    assetsList: jspb.Message.toObjectList(msg.getAssetsList(),
    proto.tradingpb.Asset.toObject, includeInstance),
    baselinesList: jspb.Message.toObjectList(msg.getBaselinesList(),
    proto.tradingpb.Asset.toObject, includeInstance),
    startts: jspb.Message.getFieldWithDefault(msg, 3, 0),
    endts: jspb.Message.getFieldWithDefault(msg, 4, 0),
    strategiesList: jspb.Message.toObjectList(msg.getStrategiesList(),
    proto.tradingpb.Strategy.toObject, includeInstance),
    wallet: (f = msg.getWallet()) && proto.tradingpb.Wallet.toObject(includeInstance, f),
    title: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.SimTradingParams}
 */
proto.tradingpb.SimTradingParams.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.SimTradingParams;
  return proto.tradingpb.SimTradingParams.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.SimTradingParams} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.SimTradingParams}
 */
proto.tradingpb.SimTradingParams.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tradingpb.Asset;
      reader.readMessage(value,proto.tradingpb.Asset.deserializeBinaryFromReader);
      msg.addAssets(value);
      break;
    case 2:
      var value = new proto.tradingpb.Asset;
      reader.readMessage(value,proto.tradingpb.Asset.deserializeBinaryFromReader);
      msg.addBaselines(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStartts(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndts(value);
      break;
    case 5:
      var value = new proto.tradingpb.Strategy;
      reader.readMessage(value,proto.tradingpb.Strategy.deserializeBinaryFromReader);
      msg.addStrategies(value);
      break;
    case 6:
      var value = new proto.tradingpb.Wallet;
      reader.readMessage(value,proto.tradingpb.Wallet.deserializeBinaryFromReader);
      msg.setWallet(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setTitle(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.SimTradingParams.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.SimTradingParams.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.SimTradingParams} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.SimTradingParams.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAssetsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tradingpb.Asset.serializeBinaryToWriter
    );
  }
  f = message.getBaselinesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.tradingpb.Asset.serializeBinaryToWriter
    );
  }
  f = message.getStartts();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getEndts();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getStrategiesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.tradingpb.Strategy.serializeBinaryToWriter
    );
  }
  f = message.getWallet();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.tradingpb.Wallet.serializeBinaryToWriter
    );
  }
  f = message.getTitle();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * repeated Asset assets = 1;
 * @return {!Array<!proto.tradingpb.Asset>}
 */
proto.tradingpb.SimTradingParams.prototype.getAssetsList = function() {
  return /** @type{!Array<!proto.tradingpb.Asset>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingpb.Asset, 1));
};


/**
 * @param {!Array<!proto.tradingpb.Asset>} value
 * @return {!proto.tradingpb.SimTradingParams} returns this
*/
proto.tradingpb.SimTradingParams.prototype.setAssetsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tradingpb.Asset=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.Asset}
 */
proto.tradingpb.SimTradingParams.prototype.addAssets = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tradingpb.Asset, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.SimTradingParams} returns this
 */
proto.tradingpb.SimTradingParams.prototype.clearAssetsList = function() {
  return this.setAssetsList([]);
};


/**
 * repeated Asset baselines = 2;
 * @return {!Array<!proto.tradingpb.Asset>}
 */
proto.tradingpb.SimTradingParams.prototype.getBaselinesList = function() {
  return /** @type{!Array<!proto.tradingpb.Asset>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingpb.Asset, 2));
};


/**
 * @param {!Array<!proto.tradingpb.Asset>} value
 * @return {!proto.tradingpb.SimTradingParams} returns this
*/
proto.tradingpb.SimTradingParams.prototype.setBaselinesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.tradingpb.Asset=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.Asset}
 */
proto.tradingpb.SimTradingParams.prototype.addBaselines = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tradingpb.Asset, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.SimTradingParams} returns this
 */
proto.tradingpb.SimTradingParams.prototype.clearBaselinesList = function() {
  return this.setBaselinesList([]);
};


/**
 * optional int64 startTs = 3;
 * @return {number}
 */
proto.tradingpb.SimTradingParams.prototype.getStartts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.SimTradingParams} returns this
 */
proto.tradingpb.SimTradingParams.prototype.setStartts = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 endTs = 4;
 * @return {number}
 */
proto.tradingpb.SimTradingParams.prototype.getEndts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.SimTradingParams} returns this
 */
proto.tradingpb.SimTradingParams.prototype.setEndts = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated Strategy strategies = 5;
 * @return {!Array<!proto.tradingpb.Strategy>}
 */
proto.tradingpb.SimTradingParams.prototype.getStrategiesList = function() {
  return /** @type{!Array<!proto.tradingpb.Strategy>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingpb.Strategy, 5));
};


/**
 * @param {!Array<!proto.tradingpb.Strategy>} value
 * @return {!proto.tradingpb.SimTradingParams} returns this
*/
proto.tradingpb.SimTradingParams.prototype.setStrategiesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.tradingpb.Strategy=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.Strategy}
 */
proto.tradingpb.SimTradingParams.prototype.addStrategies = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.tradingpb.Strategy, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.SimTradingParams} returns this
 */
proto.tradingpb.SimTradingParams.prototype.clearStrategiesList = function() {
  return this.setStrategiesList([]);
};


/**
 * optional Wallet wallet = 6;
 * @return {?proto.tradingpb.Wallet}
 */
proto.tradingpb.SimTradingParams.prototype.getWallet = function() {
  return /** @type{?proto.tradingpb.Wallet} */ (
    jspb.Message.getWrapperField(this, proto.tradingpb.Wallet, 6));
};


/**
 * @param {?proto.tradingpb.Wallet|undefined} value
 * @return {!proto.tradingpb.SimTradingParams} returns this
*/
proto.tradingpb.SimTradingParams.prototype.setWallet = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.SimTradingParams} returns this
 */
proto.tradingpb.SimTradingParams.prototype.clearWallet = function() {
  return this.setWallet(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.SimTradingParams.prototype.hasWallet = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * optional string title = 7;
 * @return {string}
 */
proto.tradingpb.SimTradingParams.prototype.getTitle = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.SimTradingParams} returns this
 */
proto.tradingpb.SimTradingParams.prototype.setTitle = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.TradingNodeInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.TradingNodeInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.TradingNodeInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.TradingNodeInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxtasks: jspb.Message.getFieldWithDefault(msg, 1, 0),
    curtasks: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.TradingNodeInfo}
 */
proto.tradingpb.TradingNodeInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.TradingNodeInfo;
  return proto.tradingpb.TradingNodeInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.TradingNodeInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.TradingNodeInfo}
 */
proto.tradingpb.TradingNodeInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxtasks(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setCurtasks(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.TradingNodeInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.TradingNodeInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.TradingNodeInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.TradingNodeInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxtasks();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = message.getCurtasks();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
};


/**
 * optional int32 maxTasks = 1;
 * @return {number}
 */
proto.tradingpb.TradingNodeInfo.prototype.getMaxtasks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.TradingNodeInfo} returns this
 */
proto.tradingpb.TradingNodeInfo.prototype.setMaxtasks = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int32 curTasks = 2;
 * @return {number}
 */
proto.tradingpb.TradingNodeInfo.prototype.getCurtasks = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.TradingNodeInfo} returns this
 */
proto.tradingpb.TradingNodeInfo.prototype.setCurtasks = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.SimTradingCacheNode.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.SimTradingCacheNode.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.SimTradingCacheNode} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.SimTradingCacheNode.toObject = function(includeInstance, msg) {
  var f, obj = {
    params: (f = msg.getParams()) && proto.tradingpb.SimTradingParams.toObject(includeInstance, f),
    key: jspb.Message.getFieldWithDefault(msg, 2, ""),
    lastts: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.SimTradingCacheNode}
 */
proto.tradingpb.SimTradingCacheNode.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.SimTradingCacheNode;
  return proto.tradingpb.SimTradingCacheNode.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.SimTradingCacheNode} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.SimTradingCacheNode}
 */
proto.tradingpb.SimTradingCacheNode.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tradingpb.SimTradingParams;
      reader.readMessage(value,proto.tradingpb.SimTradingParams.deserializeBinaryFromReader);
      msg.setParams(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setKey(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastts(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.SimTradingCacheNode.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.SimTradingCacheNode.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.SimTradingCacheNode} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.SimTradingCacheNode.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParams();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tradingpb.SimTradingParams.serializeBinaryToWriter
    );
  }
  f = message.getKey();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getLastts();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
};


/**
 * optional SimTradingParams params = 1;
 * @return {?proto.tradingpb.SimTradingParams}
 */
proto.tradingpb.SimTradingCacheNode.prototype.getParams = function() {
  return /** @type{?proto.tradingpb.SimTradingParams} */ (
    jspb.Message.getWrapperField(this, proto.tradingpb.SimTradingParams, 1));
};


/**
 * @param {?proto.tradingpb.SimTradingParams|undefined} value
 * @return {!proto.tradingpb.SimTradingCacheNode} returns this
*/
proto.tradingpb.SimTradingCacheNode.prototype.setParams = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.SimTradingCacheNode} returns this
 */
proto.tradingpb.SimTradingCacheNode.prototype.clearParams = function() {
  return this.setParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.SimTradingCacheNode.prototype.hasParams = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional string key = 2;
 * @return {string}
 */
proto.tradingpb.SimTradingCacheNode.prototype.getKey = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.SimTradingCacheNode} returns this
 */
proto.tradingpb.SimTradingCacheNode.prototype.setKey = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 lastTs = 3;
 * @return {number}
 */
proto.tradingpb.SimTradingCacheNode.prototype.getLastts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.SimTradingCacheNode} returns this
 */
proto.tradingpb.SimTradingCacheNode.prototype.setLastts = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tradingpb.SimTradingCache.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.SimTradingCache.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.SimTradingCache.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.SimTradingCache} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.SimTradingCache.toObject = function(includeInstance, msg) {
  var f, obj = {
    nodesList: jspb.Message.toObjectList(msg.getNodesList(),
    proto.tradingpb.SimTradingCacheNode.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.SimTradingCache}
 */
proto.tradingpb.SimTradingCache.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.SimTradingCache;
  return proto.tradingpb.SimTradingCache.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.SimTradingCache} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.SimTradingCache}
 */
proto.tradingpb.SimTradingCache.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tradingpb.SimTradingCacheNode;
      reader.readMessage(value,proto.tradingpb.SimTradingCacheNode.deserializeBinaryFromReader);
      msg.addNodes(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.SimTradingCache.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.SimTradingCache.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.SimTradingCache} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.SimTradingCache.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getNodesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.tradingpb.SimTradingCacheNode.serializeBinaryToWriter
    );
  }
};


/**
 * repeated SimTradingCacheNode nodes = 1;
 * @return {!Array<!proto.tradingpb.SimTradingCacheNode>}
 */
proto.tradingpb.SimTradingCache.prototype.getNodesList = function() {
  return /** @type{!Array<!proto.tradingpb.SimTradingCacheNode>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingpb.SimTradingCacheNode, 1));
};


/**
 * @param {!Array<!proto.tradingpb.SimTradingCacheNode>} value
 * @return {!proto.tradingpb.SimTradingCache} returns this
*/
proto.tradingpb.SimTradingCache.prototype.setNodesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tradingpb.SimTradingCacheNode=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.SimTradingCacheNode}
 */
proto.tradingpb.SimTradingCache.prototype.addNodes = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tradingpb.SimTradingCacheNode, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.SimTradingCache} returns this
 */
proto.tradingpb.SimTradingCache.prototype.clearNodesList = function() {
  return this.setNodesList([]);
};


/**
 * @enum {number}
 */
proto.tradingpb.CtrlType = {
  CTRL_INIT: 0,
  CTRL_BUY: 1,
  CTRL_SELL: 2,
  CTRL_STOPLOSS: 3,
  CTRL_TAKEPROFIT: 4,
  CTRL_WITHDRAW: 5,
  CTRL_DEPOSIT: 6
};

/**
 * @enum {number}
 */
proto.tradingpb.IndicatorType = {
  IT_SINGLEVALUE: 0,
  IT_SINGLEPRICE: 1
};

/**
 * @enum {number}
 */
proto.tradingpb.AIPTimeType = {
  AIPTT_WEEKDAY: 0,
  AIPTT_MONTHDAY: 1
};

goog.object.extend(exports, proto.tradingpb);
