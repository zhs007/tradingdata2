// source: tradingdb2.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.tradingdb2pb.Candle', null, global);
goog.exportSymbol('proto.tradingdb2pb.Candles', null, global);
goog.exportSymbol('proto.tradingdb2pb.ReplyGetCandles', null, global);
goog.exportSymbol('proto.tradingdb2pb.ReplyUpdCandles', null, global);
goog.exportSymbol('proto.tradingdb2pb.RequestGetCandles', null, global);
goog.exportSymbol('proto.tradingdb2pb.RequestUpdCandles', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingdb2pb.Candle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingdb2pb.Candle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingdb2pb.Candle.displayName = 'proto.tradingdb2pb.Candle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingdb2pb.Candles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tradingdb2pb.Candles.repeatedFields_, null);
};
goog.inherits(proto.tradingdb2pb.Candles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingdb2pb.Candles.displayName = 'proto.tradingdb2pb.Candles';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingdb2pb.RequestUpdCandles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingdb2pb.RequestUpdCandles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingdb2pb.RequestUpdCandles.displayName = 'proto.tradingdb2pb.RequestUpdCandles';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingdb2pb.ReplyUpdCandles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingdb2pb.ReplyUpdCandles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingdb2pb.ReplyUpdCandles.displayName = 'proto.tradingdb2pb.ReplyUpdCandles';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingdb2pb.RequestGetCandles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingdb2pb.RequestGetCandles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingdb2pb.RequestGetCandles.displayName = 'proto.tradingdb2pb.RequestGetCandles';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingdb2pb.ReplyGetCandles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingdb2pb.ReplyGetCandles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingdb2pb.ReplyGetCandles.displayName = 'proto.tradingdb2pb.ReplyGetCandles';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingdb2pb.Candle.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingdb2pb.Candle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingdb2pb.Candle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingdb2pb.Candle.toObject = function(includeInstance, msg) {
  var f, obj = {
    ts: jspb.Message.getFieldWithDefault(msg, 1, 0),
    open: jspb.Message.getFieldWithDefault(msg, 2, 0),
    close: jspb.Message.getFieldWithDefault(msg, 3, 0),
    high: jspb.Message.getFieldWithDefault(msg, 4, 0),
    low: jspb.Message.getFieldWithDefault(msg, 5, 0),
    volume: jspb.Message.getFieldWithDefault(msg, 6, 0),
    openinterest: jspb.Message.getFieldWithDefault(msg, 7, 0),
    trades: jspb.Message.getFieldWithDefault(msg, 8, 0),
    vwap: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    lastsize: jspb.Message.getFieldWithDefault(msg, 10, 0),
    turnover: jspb.Message.getFieldWithDefault(msg, 11, 0),
    homenotional: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    foreignnotional: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingdb2pb.Candle}
 */
proto.tradingdb2pb.Candle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingdb2pb.Candle;
  return proto.tradingdb2pb.Candle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingdb2pb.Candle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingdb2pb.Candle}
 */
proto.tradingdb2pb.Candle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOpen(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setClose(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHigh(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLow(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVolume(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOpeninterest(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTrades(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVwap(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastsize(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTurnover(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHomenotional(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setForeignnotional(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingdb2pb.Candle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingdb2pb.Candle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingdb2pb.Candle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingdb2pb.Candle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTs();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getOpen();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getClose();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getHigh();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getLow();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getVolume();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getOpeninterest();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getTrades();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getVwap();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getLastsize();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getTurnover();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getHomenotional();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getForeignnotional();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
};


/**
 * optional int64 ts = 1;
 * @return {number}
 */
proto.tradingdb2pb.Candle.prototype.getTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingdb2pb.Candle} returns this
 */
proto.tradingdb2pb.Candle.prototype.setTs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 open = 2;
 * @return {number}
 */
proto.tradingdb2pb.Candle.prototype.getOpen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingdb2pb.Candle} returns this
 */
proto.tradingdb2pb.Candle.prototype.setOpen = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 close = 3;
 * @return {number}
 */
proto.tradingdb2pb.Candle.prototype.getClose = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingdb2pb.Candle} returns this
 */
proto.tradingdb2pb.Candle.prototype.setClose = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 high = 4;
 * @return {number}
 */
proto.tradingdb2pb.Candle.prototype.getHigh = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingdb2pb.Candle} returns this
 */
proto.tradingdb2pb.Candle.prototype.setHigh = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 low = 5;
 * @return {number}
 */
proto.tradingdb2pb.Candle.prototype.getLow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingdb2pb.Candle} returns this
 */
proto.tradingdb2pb.Candle.prototype.setLow = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 volume = 6;
 * @return {number}
 */
proto.tradingdb2pb.Candle.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingdb2pb.Candle} returns this
 */
proto.tradingdb2pb.Candle.prototype.setVolume = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 openInterest = 7;
 * @return {number}
 */
proto.tradingdb2pb.Candle.prototype.getOpeninterest = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingdb2pb.Candle} returns this
 */
proto.tradingdb2pb.Candle.prototype.setOpeninterest = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 trades = 8;
 * @return {number}
 */
proto.tradingdb2pb.Candle.prototype.getTrades = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingdb2pb.Candle} returns this
 */
proto.tradingdb2pb.Candle.prototype.setTrades = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional double vwap = 9;
 * @return {number}
 */
proto.tradingdb2pb.Candle.prototype.getVwap = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingdb2pb.Candle} returns this
 */
proto.tradingdb2pb.Candle.prototype.setVwap = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional int64 lastSize = 10;
 * @return {number}
 */
proto.tradingdb2pb.Candle.prototype.getLastsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingdb2pb.Candle} returns this
 */
proto.tradingdb2pb.Candle.prototype.setLastsize = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 turnover = 11;
 * @return {number}
 */
proto.tradingdb2pb.Candle.prototype.getTurnover = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingdb2pb.Candle} returns this
 */
proto.tradingdb2pb.Candle.prototype.setTurnover = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional double homeNotional = 12;
 * @return {number}
 */
proto.tradingdb2pb.Candle.prototype.getHomenotional = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingdb2pb.Candle} returns this
 */
proto.tradingdb2pb.Candle.prototype.setHomenotional = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional double foreignNotional = 13;
 * @return {number}
 */
proto.tradingdb2pb.Candle.prototype.getForeignnotional = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingdb2pb.Candle} returns this
 */
proto.tradingdb2pb.Candle.prototype.setForeignnotional = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tradingdb2pb.Candles.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingdb2pb.Candles.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingdb2pb.Candles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingdb2pb.Candles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingdb2pb.Candles.toObject = function(includeInstance, msg) {
  var f, obj = {
    market: jspb.Message.getFieldWithDefault(msg, 1, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tag: jspb.Message.getFieldWithDefault(msg, 3, ""),
    candlesList: jspb.Message.toObjectList(msg.getCandlesList(),
    proto.tradingdb2pb.Candle.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingdb2pb.Candles}
 */
proto.tradingdb2pb.Candles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingdb2pb.Candles;
  return proto.tradingdb2pb.Candles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingdb2pb.Candles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingdb2pb.Candles}
 */
proto.tradingdb2pb.Candles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    case 4:
      var value = new proto.tradingdb2pb.Candle;
      reader.readMessage(value,proto.tradingdb2pb.Candle.deserializeBinaryFromReader);
      msg.addCandles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingdb2pb.Candles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingdb2pb.Candles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingdb2pb.Candles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingdb2pb.Candles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCandlesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.tradingdb2pb.Candle.serializeBinaryToWriter
    );
  }
};


/**
 * optional string market = 1;
 * @return {string}
 */
proto.tradingdb2pb.Candles.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingdb2pb.Candles} returns this
 */
proto.tradingdb2pb.Candles.prototype.setMarket = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.tradingdb2pb.Candles.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingdb2pb.Candles} returns this
 */
proto.tradingdb2pb.Candles.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string tag = 3;
 * @return {string}
 */
proto.tradingdb2pb.Candles.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingdb2pb.Candles} returns this
 */
proto.tradingdb2pb.Candles.prototype.setTag = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Candle candles = 4;
 * @return {!Array<!proto.tradingdb2pb.Candle>}
 */
proto.tradingdb2pb.Candles.prototype.getCandlesList = function() {
  return /** @type{!Array<!proto.tradingdb2pb.Candle>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingdb2pb.Candle, 4));
};


/**
 * @param {!Array<!proto.tradingdb2pb.Candle>} value
 * @return {!proto.tradingdb2pb.Candles} returns this
*/
proto.tradingdb2pb.Candles.prototype.setCandlesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.tradingdb2pb.Candle=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingdb2pb.Candle}
 */
proto.tradingdb2pb.Candles.prototype.addCandles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.tradingdb2pb.Candle, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingdb2pb.Candles} returns this
 */
proto.tradingdb2pb.Candles.prototype.clearCandlesList = function() {
  return this.setCandlesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingdb2pb.RequestUpdCandles.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingdb2pb.RequestUpdCandles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingdb2pb.RequestUpdCandles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingdb2pb.RequestUpdCandles.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    candles: (f = msg.getCandles()) && proto.tradingdb2pb.Candles.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingdb2pb.RequestUpdCandles}
 */
proto.tradingdb2pb.RequestUpdCandles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingdb2pb.RequestUpdCandles;
  return proto.tradingdb2pb.RequestUpdCandles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingdb2pb.RequestUpdCandles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingdb2pb.RequestUpdCandles}
 */
proto.tradingdb2pb.RequestUpdCandles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = new proto.tradingdb2pb.Candles;
      reader.readMessage(value,proto.tradingdb2pb.Candles.deserializeBinaryFromReader);
      msg.setCandles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingdb2pb.RequestUpdCandles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingdb2pb.RequestUpdCandles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingdb2pb.RequestUpdCandles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingdb2pb.RequestUpdCandles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCandles();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tradingdb2pb.Candles.serializeBinaryToWriter
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.tradingdb2pb.RequestUpdCandles.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingdb2pb.RequestUpdCandles} returns this
 */
proto.tradingdb2pb.RequestUpdCandles.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Candles candles = 2;
 * @return {?proto.tradingdb2pb.Candles}
 */
proto.tradingdb2pb.RequestUpdCandles.prototype.getCandles = function() {
  return /** @type{?proto.tradingdb2pb.Candles} */ (
    jspb.Message.getWrapperField(this, proto.tradingdb2pb.Candles, 2));
};


/**
 * @param {?proto.tradingdb2pb.Candles|undefined} value
 * @return {!proto.tradingdb2pb.RequestUpdCandles} returns this
*/
proto.tradingdb2pb.RequestUpdCandles.prototype.setCandles = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingdb2pb.RequestUpdCandles} returns this
 */
proto.tradingdb2pb.RequestUpdCandles.prototype.clearCandles = function() {
  return this.setCandles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingdb2pb.RequestUpdCandles.prototype.hasCandles = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingdb2pb.ReplyUpdCandles.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingdb2pb.ReplyUpdCandles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingdb2pb.ReplyUpdCandles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingdb2pb.ReplyUpdCandles.toObject = function(includeInstance, msg) {
  var f, obj = {
    lengthok: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingdb2pb.ReplyUpdCandles}
 */
proto.tradingdb2pb.ReplyUpdCandles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingdb2pb.ReplyUpdCandles;
  return proto.tradingdb2pb.ReplyUpdCandles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingdb2pb.ReplyUpdCandles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingdb2pb.ReplyUpdCandles}
 */
proto.tradingdb2pb.ReplyUpdCandles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLengthok(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingdb2pb.ReplyUpdCandles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingdb2pb.ReplyUpdCandles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingdb2pb.ReplyUpdCandles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingdb2pb.ReplyUpdCandles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLengthok();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 lengthOK = 1;
 * @return {number}
 */
proto.tradingdb2pb.ReplyUpdCandles.prototype.getLengthok = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingdb2pb.ReplyUpdCandles} returns this
 */
proto.tradingdb2pb.ReplyUpdCandles.prototype.setLengthok = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingdb2pb.RequestGetCandles.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingdb2pb.RequestGetCandles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingdb2pb.RequestGetCandles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingdb2pb.RequestGetCandles.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    market: jspb.Message.getFieldWithDefault(msg, 2, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tag: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingdb2pb.RequestGetCandles}
 */
proto.tradingdb2pb.RequestGetCandles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingdb2pb.RequestGetCandles;
  return proto.tradingdb2pb.RequestGetCandles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingdb2pb.RequestGetCandles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingdb2pb.RequestGetCandles}
 */
proto.tradingdb2pb.RequestGetCandles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingdb2pb.RequestGetCandles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingdb2pb.RequestGetCandles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingdb2pb.RequestGetCandles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingdb2pb.RequestGetCandles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMarket();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.tradingdb2pb.RequestGetCandles.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingdb2pb.RequestGetCandles} returns this
 */
proto.tradingdb2pb.RequestGetCandles.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string market = 2;
 * @return {string}
 */
proto.tradingdb2pb.RequestGetCandles.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingdb2pb.RequestGetCandles} returns this
 */
proto.tradingdb2pb.RequestGetCandles.prototype.setMarket = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string symbol = 3;
 * @return {string}
 */
proto.tradingdb2pb.RequestGetCandles.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingdb2pb.RequestGetCandles} returns this
 */
proto.tradingdb2pb.RequestGetCandles.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string tag = 4;
 * @return {string}
 */
proto.tradingdb2pb.RequestGetCandles.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingdb2pb.RequestGetCandles} returns this
 */
proto.tradingdb2pb.RequestGetCandles.prototype.setTag = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingdb2pb.ReplyGetCandles.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingdb2pb.ReplyGetCandles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingdb2pb.ReplyGetCandles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingdb2pb.ReplyGetCandles.toObject = function(includeInstance, msg) {
  var f, obj = {
    candles: (f = msg.getCandles()) && proto.tradingdb2pb.Candles.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingdb2pb.ReplyGetCandles}
 */
proto.tradingdb2pb.ReplyGetCandles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingdb2pb.ReplyGetCandles;
  return proto.tradingdb2pb.ReplyGetCandles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingdb2pb.ReplyGetCandles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingdb2pb.ReplyGetCandles}
 */
proto.tradingdb2pb.ReplyGetCandles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tradingdb2pb.Candles;
      reader.readMessage(value,proto.tradingdb2pb.Candles.deserializeBinaryFromReader);
      msg.setCandles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingdb2pb.ReplyGetCandles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingdb2pb.ReplyGetCandles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingdb2pb.ReplyGetCandles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingdb2pb.ReplyGetCandles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCandles();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tradingdb2pb.Candles.serializeBinaryToWriter
    );
  }
};


/**
 * optional Candles candles = 1;
 * @return {?proto.tradingdb2pb.Candles}
 */
proto.tradingdb2pb.ReplyGetCandles.prototype.getCandles = function() {
  return /** @type{?proto.tradingdb2pb.Candles} */ (
    jspb.Message.getWrapperField(this, proto.tradingdb2pb.Candles, 1));
};


/**
 * @param {?proto.tradingdb2pb.Candles|undefined} value
 * @return {!proto.tradingdb2pb.ReplyGetCandles} returns this
*/
proto.tradingdb2pb.ReplyGetCandles.prototype.setCandles = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingdb2pb.ReplyGetCandles} returns this
 */
proto.tradingdb2pb.ReplyGetCandles.prototype.clearCandles = function() {
  return this.setCandles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingdb2pb.ReplyGetCandles.prototype.hasCandles = function() {
  return jspb.Message.getField(this, 1) != null;
};


goog.object.extend(exports, proto.tradingdb2pb);
