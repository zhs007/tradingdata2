// source: tradingdb2.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var trading2_pb = require('./trading2_pb.js');
goog.object.extend(proto, trading2_pb);
goog.exportSymbol('proto.tradingpb.Candle', null, global);
goog.exportSymbol('proto.tradingpb.Candles', null, global);
goog.exportSymbol('proto.tradingpb.Fund', null, global);
goog.exportSymbol('proto.tradingpb.FundManager', null, global);
goog.exportSymbol('proto.tradingpb.FundResult', null, global);
goog.exportSymbol('proto.tradingpb.FundSize', null, global);
goog.exportSymbol('proto.tradingpb.ReplyGetCandles', null, global);
goog.exportSymbol('proto.tradingpb.ReplyGetSymbol', null, global);
goog.exportSymbol('proto.tradingpb.ReplySimTrading', null, global);
goog.exportSymbol('proto.tradingpb.ReplyUpdCandles', null, global);
goog.exportSymbol('proto.tradingpb.ReplyUpdSymbol', null, global);
goog.exportSymbol('proto.tradingpb.RequestGetCandles', null, global);
goog.exportSymbol('proto.tradingpb.RequestGetSymbol', null, global);
goog.exportSymbol('proto.tradingpb.RequestGetSymbols', null, global);
goog.exportSymbol('proto.tradingpb.RequestSimTrading', null, global);
goog.exportSymbol('proto.tradingpb.RequestUpdCandles', null, global);
goog.exportSymbol('proto.tradingpb.RequestUpdSymbol', null, global);
goog.exportSymbol('proto.tradingpb.SymbolInfo', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.Candle = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpb.Candle, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.Candle.displayName = 'proto.tradingpb.Candle';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.Candles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tradingpb.Candles.repeatedFields_, null);
};
goog.inherits(proto.tradingpb.Candles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.Candles.displayName = 'proto.tradingpb.Candles';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.FundSize = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpb.FundSize, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.FundSize.displayName = 'proto.tradingpb.FundSize';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.FundManager = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tradingpb.FundManager.repeatedFields_, null);
};
goog.inherits(proto.tradingpb.FundManager, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.FundManager.displayName = 'proto.tradingpb.FundManager';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.FundResult = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpb.FundResult, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.FundResult.displayName = 'proto.tradingpb.FundResult';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.Fund = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tradingpb.Fund.repeatedFields_, null);
};
goog.inherits(proto.tradingpb.Fund, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.Fund.displayName = 'proto.tradingpb.Fund';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.SymbolInfo = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpb.SymbolInfo, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.SymbolInfo.displayName = 'proto.tradingpb.SymbolInfo';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.RequestUpdCandles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpb.RequestUpdCandles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.RequestUpdCandles.displayName = 'proto.tradingpb.RequestUpdCandles';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.ReplyUpdCandles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpb.ReplyUpdCandles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.ReplyUpdCandles.displayName = 'proto.tradingpb.ReplyUpdCandles';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.RequestGetCandles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tradingpb.RequestGetCandles.repeatedFields_, null);
};
goog.inherits(proto.tradingpb.RequestGetCandles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.RequestGetCandles.displayName = 'proto.tradingpb.RequestGetCandles';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.ReplyGetCandles = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpb.ReplyGetCandles, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.ReplyGetCandles.displayName = 'proto.tradingpb.ReplyGetCandles';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.RequestUpdSymbol = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpb.RequestUpdSymbol, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.RequestUpdSymbol.displayName = 'proto.tradingpb.RequestUpdSymbol';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.ReplyUpdSymbol = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpb.ReplyUpdSymbol, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.ReplyUpdSymbol.displayName = 'proto.tradingpb.ReplyUpdSymbol';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.RequestGetSymbol = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpb.RequestGetSymbol, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.RequestGetSymbol.displayName = 'proto.tradingpb.RequestGetSymbol';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.ReplyGetSymbol = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpb.ReplyGetSymbol, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.ReplyGetSymbol.displayName = 'proto.tradingpb.ReplyGetSymbol';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.RequestGetSymbols = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tradingpb.RequestGetSymbols.repeatedFields_, null);
};
goog.inherits(proto.tradingpb.RequestGetSymbols, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.RequestGetSymbols.displayName = 'proto.tradingpb.RequestGetSymbols';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.RequestSimTrading = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.tradingpb.RequestSimTrading, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.RequestSimTrading.displayName = 'proto.tradingpb.RequestSimTrading';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.tradingpb.ReplySimTrading = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.tradingpb.ReplySimTrading.repeatedFields_, null);
};
goog.inherits(proto.tradingpb.ReplySimTrading, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.tradingpb.ReplySimTrading.displayName = 'proto.tradingpb.ReplySimTrading';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.Candle.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.Candle.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.Candle} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.Candle.toObject = function(includeInstance, msg) {
  var f, obj = {
    ts: jspb.Message.getFieldWithDefault(msg, 1, 0),
    open: jspb.Message.getFieldWithDefault(msg, 2, 0),
    close: jspb.Message.getFieldWithDefault(msg, 3, 0),
    high: jspb.Message.getFieldWithDefault(msg, 4, 0),
    low: jspb.Message.getFieldWithDefault(msg, 5, 0),
    volume: jspb.Message.getFieldWithDefault(msg, 6, 0),
    openinterest: jspb.Message.getFieldWithDefault(msg, 7, 0),
    trades: jspb.Message.getFieldWithDefault(msg, 8, 0),
    vwap: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    lastsize: jspb.Message.getFieldWithDefault(msg, 10, 0),
    turnover: jspb.Message.getFieldWithDefault(msg, 11, 0),
    homenotional: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    foreignnotional: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    totalmoney: jspb.Message.getFieldWithDefault(msg, 14, 0),
    paused: jspb.Message.getBooleanFieldWithDefault(msg, 15, false),
    highlimit: jspb.Message.getFieldWithDefault(msg, 16, 0),
    lowlimit: jspb.Message.getFieldWithDefault(msg, 17, 0),
    avg: jspb.Message.getFieldWithDefault(msg, 18, 0),
    preclose: jspb.Message.getFieldWithDefault(msg, 19, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.Candle}
 */
proto.tradingpb.Candle.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.Candle;
  return proto.tradingpb.Candle.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.Candle} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.Candle}
 */
proto.tradingpb.Candle.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTs(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOpen(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setClose(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHigh(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLow(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setVolume(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setOpeninterest(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTrades(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setVwap(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLastsize(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTurnover(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setHomenotional(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setForeignnotional(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTotalmoney(value);
      break;
    case 15:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPaused(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setHighlimit(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setLowlimit(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setAvg(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setPreclose(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.Candle.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.Candle.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.Candle} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.Candle.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTs();
  if (f !== 0) {
    writer.writeInt64(
      1,
      f
    );
  }
  f = message.getOpen();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getClose();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getHigh();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getLow();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getVolume();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getOpeninterest();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getTrades();
  if (f !== 0) {
    writer.writeInt64(
      8,
      f
    );
  }
  f = message.getVwap();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getLastsize();
  if (f !== 0) {
    writer.writeInt64(
      10,
      f
    );
  }
  f = message.getTurnover();
  if (f !== 0) {
    writer.writeInt64(
      11,
      f
    );
  }
  f = message.getHomenotional();
  if (f !== 0.0) {
    writer.writeDouble(
      12,
      f
    );
  }
  f = message.getForeignnotional();
  if (f !== 0.0) {
    writer.writeDouble(
      13,
      f
    );
  }
  f = message.getTotalmoney();
  if (f !== 0) {
    writer.writeInt64(
      14,
      f
    );
  }
  f = message.getPaused();
  if (f) {
    writer.writeBool(
      15,
      f
    );
  }
  f = message.getHighlimit();
  if (f !== 0) {
    writer.writeInt64(
      16,
      f
    );
  }
  f = message.getLowlimit();
  if (f !== 0) {
    writer.writeInt64(
      17,
      f
    );
  }
  f = message.getAvg();
  if (f !== 0) {
    writer.writeInt64(
      18,
      f
    );
  }
  f = message.getPreclose();
  if (f !== 0) {
    writer.writeInt64(
      19,
      f
    );
  }
};


/**
 * optional int64 ts = 1;
 * @return {number}
 */
proto.tradingpb.Candle.prototype.getTs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.Candle} returns this
 */
proto.tradingpb.Candle.prototype.setTs = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional int64 open = 2;
 * @return {number}
 */
proto.tradingpb.Candle.prototype.getOpen = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.Candle} returns this
 */
proto.tradingpb.Candle.prototype.setOpen = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 close = 3;
 * @return {number}
 */
proto.tradingpb.Candle.prototype.getClose = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.Candle} returns this
 */
proto.tradingpb.Candle.prototype.setClose = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 high = 4;
 * @return {number}
 */
proto.tradingpb.Candle.prototype.getHigh = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.Candle} returns this
 */
proto.tradingpb.Candle.prototype.setHigh = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int64 low = 5;
 * @return {number}
 */
proto.tradingpb.Candle.prototype.getLow = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.Candle} returns this
 */
proto.tradingpb.Candle.prototype.setLow = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 volume = 6;
 * @return {number}
 */
proto.tradingpb.Candle.prototype.getVolume = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.Candle} returns this
 */
proto.tradingpb.Candle.prototype.setVolume = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 openInterest = 7;
 * @return {number}
 */
proto.tradingpb.Candle.prototype.getOpeninterest = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.Candle} returns this
 */
proto.tradingpb.Candle.prototype.setOpeninterest = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int64 trades = 8;
 * @return {number}
 */
proto.tradingpb.Candle.prototype.getTrades = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.Candle} returns this
 */
proto.tradingpb.Candle.prototype.setTrades = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional double vwap = 9;
 * @return {number}
 */
proto.tradingpb.Candle.prototype.getVwap = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.Candle} returns this
 */
proto.tradingpb.Candle.prototype.setVwap = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional int64 lastSize = 10;
 * @return {number}
 */
proto.tradingpb.Candle.prototype.getLastsize = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.Candle} returns this
 */
proto.tradingpb.Candle.prototype.setLastsize = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int64 turnover = 11;
 * @return {number}
 */
proto.tradingpb.Candle.prototype.getTurnover = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.Candle} returns this
 */
proto.tradingpb.Candle.prototype.setTurnover = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};


/**
 * optional double homeNotional = 12;
 * @return {number}
 */
proto.tradingpb.Candle.prototype.getHomenotional = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.Candle} returns this
 */
proto.tradingpb.Candle.prototype.setHomenotional = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional double foreignNotional = 13;
 * @return {number}
 */
proto.tradingpb.Candle.prototype.getForeignnotional = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.Candle} returns this
 */
proto.tradingpb.Candle.prototype.setForeignnotional = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional int64 totalMoney = 14;
 * @return {number}
 */
proto.tradingpb.Candle.prototype.getTotalmoney = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 14, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.Candle} returns this
 */
proto.tradingpb.Candle.prototype.setTotalmoney = function(value) {
  return jspb.Message.setProto3IntField(this, 14, value);
};


/**
 * optional bool paused = 15;
 * @return {boolean}
 */
proto.tradingpb.Candle.prototype.getPaused = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 15, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tradingpb.Candle} returns this
 */
proto.tradingpb.Candle.prototype.setPaused = function(value) {
  return jspb.Message.setProto3BooleanField(this, 15, value);
};


/**
 * optional int64 highLimit = 16;
 * @return {number}
 */
proto.tradingpb.Candle.prototype.getHighlimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 16, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.Candle} returns this
 */
proto.tradingpb.Candle.prototype.setHighlimit = function(value) {
  return jspb.Message.setProto3IntField(this, 16, value);
};


/**
 * optional int64 lowLimit = 17;
 * @return {number}
 */
proto.tradingpb.Candle.prototype.getLowlimit = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 17, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.Candle} returns this
 */
proto.tradingpb.Candle.prototype.setLowlimit = function(value) {
  return jspb.Message.setProto3IntField(this, 17, value);
};


/**
 * optional int64 avg = 18;
 * @return {number}
 */
proto.tradingpb.Candle.prototype.getAvg = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.Candle} returns this
 */
proto.tradingpb.Candle.prototype.setAvg = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int64 preClose = 19;
 * @return {number}
 */
proto.tradingpb.Candle.prototype.getPreclose = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.Candle} returns this
 */
proto.tradingpb.Candle.prototype.setPreclose = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tradingpb.Candles.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.Candles.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.Candles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.Candles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.Candles.toObject = function(includeInstance, msg) {
  var f, obj = {
    market: jspb.Message.getFieldWithDefault(msg, 1, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tag: jspb.Message.getFieldWithDefault(msg, 3, ""),
    candlesList: jspb.Message.toObjectList(msg.getCandlesList(),
    proto.tradingpb.Candle.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.Candles}
 */
proto.tradingpb.Candles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.Candles;
  return proto.tradingpb.Candles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.Candles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.Candles}
 */
proto.tradingpb.Candles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    case 4:
      var value = new proto.tradingpb.Candle;
      reader.readMessage(value,proto.tradingpb.Candle.deserializeBinaryFromReader);
      msg.addCandles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.Candles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.Candles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.Candles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.Candles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getCandlesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.tradingpb.Candle.serializeBinaryToWriter
    );
  }
};


/**
 * optional string market = 1;
 * @return {string}
 */
proto.tradingpb.Candles.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.Candles} returns this
 */
proto.tradingpb.Candles.prototype.setMarket = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.tradingpb.Candles.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.Candles} returns this
 */
proto.tradingpb.Candles.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string tag = 3;
 * @return {string}
 */
proto.tradingpb.Candles.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.Candles} returns this
 */
proto.tradingpb.Candles.prototype.setTag = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * repeated Candle candles = 4;
 * @return {!Array<!proto.tradingpb.Candle>}
 */
proto.tradingpb.Candles.prototype.getCandlesList = function() {
  return /** @type{!Array<!proto.tradingpb.Candle>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingpb.Candle, 4));
};


/**
 * @param {!Array<!proto.tradingpb.Candle>} value
 * @return {!proto.tradingpb.Candles} returns this
*/
proto.tradingpb.Candles.prototype.setCandlesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.tradingpb.Candle=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.Candle}
 */
proto.tradingpb.Candles.prototype.addCandles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.tradingpb.Candle, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.Candles} returns this
 */
proto.tradingpb.Candles.prototype.clearCandlesList = function() {
  return this.setCandlesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.FundSize.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.FundSize.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.FundSize} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.FundSize.toObject = function(includeInstance, msg) {
  var f, obj = {
    size: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    time: jspb.Message.getFieldWithDefault(msg, 2, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.FundSize}
 */
proto.tradingpb.FundSize.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.FundSize;
  return proto.tradingpb.FundSize.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.FundSize} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.FundSize}
 */
proto.tradingpb.FundSize.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSize(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTime(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.FundSize.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.FundSize.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.FundSize} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.FundSize.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSize();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getTime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
};


/**
 * optional float size = 1;
 * @return {number}
 */
proto.tradingpb.FundSize.prototype.getSize = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.FundSize} returns this
 */
proto.tradingpb.FundSize.prototype.setSize = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional int64 time = 2;
 * @return {number}
 */
proto.tradingpb.FundSize.prototype.getTime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.FundSize} returns this
 */
proto.tradingpb.FundSize.prototype.setTime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tradingpb.FundManager.repeatedFields_ = [9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.FundManager.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.FundManager.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.FundManager} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.FundManager.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getFieldWithDefault(msg, 1, ""),
    starttime: jspb.Message.getFieldWithDefault(msg, 2, 0),
    endtime: jspb.Message.getFieldWithDefault(msg, 3, 0),
    birthyear: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sex: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    education: jspb.Message.getFieldWithDefault(msg, 6, ""),
    country: jspb.Message.getFieldWithDefault(msg, 7, ""),
    resume: jspb.Message.getFieldWithDefault(msg, 8, ""),
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.tradingpb.FundResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.FundManager}
 */
proto.tradingpb.FundManager.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.FundManager;
  return proto.tradingpb.FundManager.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.FundManager} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.FundManager}
 */
proto.tradingpb.FundManager.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStarttime(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndtime(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setBirthyear(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSex(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEducation(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setCountry(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setResume(value);
      break;
    case 9:
      var value = new proto.tradingpb.FundResult;
      reader.readMessage(value,proto.tradingpb.FundResult.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.FundManager.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.FundManager.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.FundManager} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.FundManager.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStarttime();
  if (f !== 0) {
    writer.writeInt64(
      2,
      f
    );
  }
  f = message.getEndtime();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getBirthyear();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getSex();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getEducation();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getCountry();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getResume();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      9,
      f,
      proto.tradingpb.FundResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional string name = 1;
 * @return {string}
 */
proto.tradingpb.FundManager.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.FundManager} returns this
 */
proto.tradingpb.FundManager.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int64 startTime = 2;
 * @return {number}
 */
proto.tradingpb.FundManager.prototype.getStarttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.FundManager} returns this
 */
proto.tradingpb.FundManager.prototype.setStarttime = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int64 endTime = 3;
 * @return {number}
 */
proto.tradingpb.FundManager.prototype.getEndtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.FundManager} returns this
 */
proto.tradingpb.FundManager.prototype.setEndtime = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 birthYear = 4;
 * @return {number}
 */
proto.tradingpb.FundManager.prototype.getBirthyear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.FundManager} returns this
 */
proto.tradingpb.FundManager.prototype.setBirthyear = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool sex = 5;
 * @return {boolean}
 */
proto.tradingpb.FundManager.prototype.getSex = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tradingpb.FundManager} returns this
 */
proto.tradingpb.FundManager.prototype.setSex = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string education = 6;
 * @return {string}
 */
proto.tradingpb.FundManager.prototype.getEducation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.FundManager} returns this
 */
proto.tradingpb.FundManager.prototype.setEducation = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string country = 7;
 * @return {string}
 */
proto.tradingpb.FundManager.prototype.getCountry = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.FundManager} returns this
 */
proto.tradingpb.FundManager.prototype.setCountry = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string resume = 8;
 * @return {string}
 */
proto.tradingpb.FundManager.prototype.getResume = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.FundManager} returns this
 */
proto.tradingpb.FundManager.prototype.setResume = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * repeated FundResult results = 9;
 * @return {!Array<!proto.tradingpb.FundResult>}
 */
proto.tradingpb.FundManager.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.tradingpb.FundResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingpb.FundResult, 9));
};


/**
 * @param {!Array<!proto.tradingpb.FundResult>} value
 * @return {!proto.tradingpb.FundManager} returns this
*/
proto.tradingpb.FundManager.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 9, value);
};


/**
 * @param {!proto.tradingpb.FundResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.FundResult}
 */
proto.tradingpb.FundManager.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 9, opt_value, proto.tradingpb.FundResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.FundManager} returns this
 */
proto.tradingpb.FundManager.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.FundResult.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.FundResult.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.FundResult} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.FundResult.toObject = function(includeInstance, msg) {
  var f, obj = {
    maxdrawdown: jspb.Message.getFloatingPointFieldWithDefault(msg, 1, 0.0),
    sharpe: jspb.Message.getFloatingPointFieldWithDefault(msg, 2, 0.0),
    annualizedreturns: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    annualizedvolatility: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    totalreturns: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    starttime: jspb.Message.getFieldWithDefault(msg, 6, 0),
    endtime: jspb.Message.getFieldWithDefault(msg, 7, 0),
    name: jspb.Message.getFieldWithDefault(msg, 8, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.FundResult}
 */
proto.tradingpb.FundResult.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.FundResult;
  return proto.tradingpb.FundResult.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.FundResult} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.FundResult}
 */
proto.tradingpb.FundResult.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setMaxdrawdown(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setSharpe(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAnnualizedreturns(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setAnnualizedvolatility(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTotalreturns(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setStarttime(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEndtime(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.FundResult.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.FundResult.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.FundResult} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.FundResult.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxdrawdown();
  if (f !== 0.0) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = message.getSharpe();
  if (f !== 0.0) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = message.getAnnualizedreturns();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getAnnualizedvolatility();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getTotalreturns();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getStarttime();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getEndtime();
  if (f !== 0) {
    writer.writeInt64(
      7,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
};


/**
 * optional float maxDrawdown = 1;
 * @return {number}
 */
proto.tradingpb.FundResult.prototype.getMaxdrawdown = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 1, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.FundResult} returns this
 */
proto.tradingpb.FundResult.prototype.setMaxdrawdown = function(value) {
  return jspb.Message.setProto3FloatField(this, 1, value);
};


/**
 * optional float sharpe = 2;
 * @return {number}
 */
proto.tradingpb.FundResult.prototype.getSharpe = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 2, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.FundResult} returns this
 */
proto.tradingpb.FundResult.prototype.setSharpe = function(value) {
  return jspb.Message.setProto3FloatField(this, 2, value);
};


/**
 * optional float annualizedReturns = 3;
 * @return {number}
 */
proto.tradingpb.FundResult.prototype.getAnnualizedreturns = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.FundResult} returns this
 */
proto.tradingpb.FundResult.prototype.setAnnualizedreturns = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float annualizedVolatility = 4;
 * @return {number}
 */
proto.tradingpb.FundResult.prototype.getAnnualizedvolatility = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.FundResult} returns this
 */
proto.tradingpb.FundResult.prototype.setAnnualizedvolatility = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float totalReturns = 5;
 * @return {number}
 */
proto.tradingpb.FundResult.prototype.getTotalreturns = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.FundResult} returns this
 */
proto.tradingpb.FundResult.prototype.setTotalreturns = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional int64 startTime = 6;
 * @return {number}
 */
proto.tradingpb.FundResult.prototype.getStarttime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.FundResult} returns this
 */
proto.tradingpb.FundResult.prototype.setStarttime = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int64 endTime = 7;
 * @return {number}
 */
proto.tradingpb.FundResult.prototype.getEndtime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.FundResult} returns this
 */
proto.tradingpb.FundResult.prototype.setEndtime = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string name = 8;
 * @return {string}
 */
proto.tradingpb.FundResult.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.FundResult} returns this
 */
proto.tradingpb.FundResult.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tradingpb.Fund.repeatedFields_ = [3,5,7,8];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.Fund.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.Fund.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.Fund} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.Fund.toObject = function(includeInstance, msg) {
  var f, obj = {
    code: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, ""),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    createtime: jspb.Message.getFieldWithDefault(msg, 4, 0),
    sizeList: jspb.Message.toObjectList(msg.getSizeList(),
    proto.tradingpb.FundSize.toObject, includeInstance),
    company: jspb.Message.getFieldWithDefault(msg, 6, ""),
    managersList: jspb.Message.toObjectList(msg.getManagersList(),
    proto.tradingpb.FundManager.toObject, includeInstance),
    resultsList: jspb.Message.toObjectList(msg.getResultsList(),
    proto.tradingpb.FundResult.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.Fund}
 */
proto.tradingpb.Fund.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.Fund;
  return proto.tradingpb.Fund.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.Fund} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.Fund}
 */
proto.tradingpb.Fund.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setCode(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setCreatetime(value);
      break;
    case 5:
      var value = new proto.tradingpb.FundSize;
      reader.readMessage(value,proto.tradingpb.FundSize.deserializeBinaryFromReader);
      msg.addSize(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setCompany(value);
      break;
    case 7:
      var value = new proto.tradingpb.FundManager;
      reader.readMessage(value,proto.tradingpb.FundManager.deserializeBinaryFromReader);
      msg.addManagers(value);
      break;
    case 8:
      var value = new proto.tradingpb.FundResult;
      reader.readMessage(value,proto.tradingpb.FundResult.deserializeBinaryFromReader);
      msg.addResults(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.Fund.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.Fund.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.Fund} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.Fund.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCode();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getCreatetime();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getSizeList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.tradingpb.FundSize.serializeBinaryToWriter
    );
  }
  f = message.getCompany();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getManagersList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.tradingpb.FundManager.serializeBinaryToWriter
    );
  }
  f = message.getResultsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      8,
      f,
      proto.tradingpb.FundResult.serializeBinaryToWriter
    );
  }
};


/**
 * optional string code = 1;
 * @return {string}
 */
proto.tradingpb.Fund.prototype.getCode = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.Fund} returns this
 */
proto.tradingpb.Fund.prototype.setCode = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.tradingpb.Fund.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.Fund} returns this
 */
proto.tradingpb.Fund.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string tags = 3;
 * @return {!Array<string>}
 */
proto.tradingpb.Fund.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tradingpb.Fund} returns this
 */
proto.tradingpb.Fund.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.Fund} returns this
 */
proto.tradingpb.Fund.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.Fund} returns this
 */
proto.tradingpb.Fund.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * optional int64 createTime = 4;
 * @return {number}
 */
proto.tradingpb.Fund.prototype.getCreatetime = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.Fund} returns this
 */
proto.tradingpb.Fund.prototype.setCreatetime = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * repeated FundSize size = 5;
 * @return {!Array<!proto.tradingpb.FundSize>}
 */
proto.tradingpb.Fund.prototype.getSizeList = function() {
  return /** @type{!Array<!proto.tradingpb.FundSize>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingpb.FundSize, 5));
};


/**
 * @param {!Array<!proto.tradingpb.FundSize>} value
 * @return {!proto.tradingpb.Fund} returns this
*/
proto.tradingpb.Fund.prototype.setSizeList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 5, value);
};


/**
 * @param {!proto.tradingpb.FundSize=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.FundSize}
 */
proto.tradingpb.Fund.prototype.addSize = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 5, opt_value, proto.tradingpb.FundSize, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.Fund} returns this
 */
proto.tradingpb.Fund.prototype.clearSizeList = function() {
  return this.setSizeList([]);
};


/**
 * optional string company = 6;
 * @return {string}
 */
proto.tradingpb.Fund.prototype.getCompany = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.Fund} returns this
 */
proto.tradingpb.Fund.prototype.setCompany = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * repeated FundManager managers = 7;
 * @return {!Array<!proto.tradingpb.FundManager>}
 */
proto.tradingpb.Fund.prototype.getManagersList = function() {
  return /** @type{!Array<!proto.tradingpb.FundManager>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingpb.FundManager, 7));
};


/**
 * @param {!Array<!proto.tradingpb.FundManager>} value
 * @return {!proto.tradingpb.Fund} returns this
*/
proto.tradingpb.Fund.prototype.setManagersList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 7, value);
};


/**
 * @param {!proto.tradingpb.FundManager=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.FundManager}
 */
proto.tradingpb.Fund.prototype.addManagers = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 7, opt_value, proto.tradingpb.FundManager, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.Fund} returns this
 */
proto.tradingpb.Fund.prototype.clearManagersList = function() {
  return this.setManagersList([]);
};


/**
 * repeated FundResult results = 8;
 * @return {!Array<!proto.tradingpb.FundResult>}
 */
proto.tradingpb.Fund.prototype.getResultsList = function() {
  return /** @type{!Array<!proto.tradingpb.FundResult>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.tradingpb.FundResult, 8));
};


/**
 * @param {!Array<!proto.tradingpb.FundResult>} value
 * @return {!proto.tradingpb.Fund} returns this
*/
proto.tradingpb.Fund.prototype.setResultsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 8, value);
};


/**
 * @param {!proto.tradingpb.FundResult=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.FundResult}
 */
proto.tradingpb.Fund.prototype.addResults = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 8, opt_value, proto.tradingpb.FundResult, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.Fund} returns this
 */
proto.tradingpb.Fund.prototype.clearResultsList = function() {
  return this.setResultsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.SymbolInfo.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.SymbolInfo.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.SymbolInfo} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.SymbolInfo.toObject = function(includeInstance, msg) {
  var f, obj = {
    market: jspb.Message.getFieldWithDefault(msg, 1, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 2, ""),
    fund: (f = msg.getFund()) && proto.tradingpb.Fund.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.SymbolInfo}
 */
proto.tradingpb.SymbolInfo.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.SymbolInfo;
  return proto.tradingpb.SymbolInfo.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.SymbolInfo} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.SymbolInfo}
 */
proto.tradingpb.SymbolInfo.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 3:
      var value = new proto.tradingpb.Fund;
      reader.readMessage(value,proto.tradingpb.Fund.deserializeBinaryFromReader);
      msg.setFund(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.SymbolInfo.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.SymbolInfo.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.SymbolInfo} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.SymbolInfo.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMarket();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFund();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.tradingpb.Fund.serializeBinaryToWriter
    );
  }
};


/**
 * optional string market = 1;
 * @return {string}
 */
proto.tradingpb.SymbolInfo.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.SymbolInfo} returns this
 */
proto.tradingpb.SymbolInfo.prototype.setMarket = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string symbol = 2;
 * @return {string}
 */
proto.tradingpb.SymbolInfo.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.SymbolInfo} returns this
 */
proto.tradingpb.SymbolInfo.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional Fund fund = 3;
 * @return {?proto.tradingpb.Fund}
 */
proto.tradingpb.SymbolInfo.prototype.getFund = function() {
  return /** @type{?proto.tradingpb.Fund} */ (
    jspb.Message.getWrapperField(this, proto.tradingpb.Fund, 3));
};


/**
 * @param {?proto.tradingpb.Fund|undefined} value
 * @return {!proto.tradingpb.SymbolInfo} returns this
*/
proto.tradingpb.SymbolInfo.prototype.setFund = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.SymbolInfo} returns this
 */
proto.tradingpb.SymbolInfo.prototype.clearFund = function() {
  return this.setFund(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.SymbolInfo.prototype.hasFund = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.RequestUpdCandles.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.RequestUpdCandles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.RequestUpdCandles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.RequestUpdCandles.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    candles: (f = msg.getCandles()) && proto.tradingpb.Candles.toObject(includeInstance, f),
    basicrequest: (f = msg.getBasicrequest()) && trading2_pb.BasicRequestData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.RequestUpdCandles}
 */
proto.tradingpb.RequestUpdCandles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.RequestUpdCandles;
  return proto.tradingpb.RequestUpdCandles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.RequestUpdCandles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.RequestUpdCandles}
 */
proto.tradingpb.RequestUpdCandles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = new proto.tradingpb.Candles;
      reader.readMessage(value,proto.tradingpb.Candles.deserializeBinaryFromReader);
      msg.setCandles(value);
      break;
    case 3:
      var value = new trading2_pb.BasicRequestData;
      reader.readMessage(value,trading2_pb.BasicRequestData.deserializeBinaryFromReader);
      msg.setBasicrequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.RequestUpdCandles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.RequestUpdCandles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.RequestUpdCandles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.RequestUpdCandles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getCandles();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tradingpb.Candles.serializeBinaryToWriter
    );
  }
  f = message.getBasicrequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      trading2_pb.BasicRequestData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.tradingpb.RequestUpdCandles.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.RequestUpdCandles} returns this
 */
proto.tradingpb.RequestUpdCandles.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Candles candles = 2;
 * @return {?proto.tradingpb.Candles}
 */
proto.tradingpb.RequestUpdCandles.prototype.getCandles = function() {
  return /** @type{?proto.tradingpb.Candles} */ (
    jspb.Message.getWrapperField(this, proto.tradingpb.Candles, 2));
};


/**
 * @param {?proto.tradingpb.Candles|undefined} value
 * @return {!proto.tradingpb.RequestUpdCandles} returns this
*/
proto.tradingpb.RequestUpdCandles.prototype.setCandles = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.RequestUpdCandles} returns this
 */
proto.tradingpb.RequestUpdCandles.prototype.clearCandles = function() {
  return this.setCandles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.RequestUpdCandles.prototype.hasCandles = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BasicRequestData basicRequest = 3;
 * @return {?proto.tradingpb.BasicRequestData}
 */
proto.tradingpb.RequestUpdCandles.prototype.getBasicrequest = function() {
  return /** @type{?proto.tradingpb.BasicRequestData} */ (
    jspb.Message.getWrapperField(this, trading2_pb.BasicRequestData, 3));
};


/**
 * @param {?proto.tradingpb.BasicRequestData|undefined} value
 * @return {!proto.tradingpb.RequestUpdCandles} returns this
*/
proto.tradingpb.RequestUpdCandles.prototype.setBasicrequest = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.RequestUpdCandles} returns this
 */
proto.tradingpb.RequestUpdCandles.prototype.clearBasicrequest = function() {
  return this.setBasicrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.RequestUpdCandles.prototype.hasBasicrequest = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.ReplyUpdCandles.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.ReplyUpdCandles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.ReplyUpdCandles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.ReplyUpdCandles.toObject = function(includeInstance, msg) {
  var f, obj = {
    lengthok: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.ReplyUpdCandles}
 */
proto.tradingpb.ReplyUpdCandles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.ReplyUpdCandles;
  return proto.tradingpb.ReplyUpdCandles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.ReplyUpdCandles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.ReplyUpdCandles}
 */
proto.tradingpb.ReplyUpdCandles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLengthok(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.ReplyUpdCandles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.ReplyUpdCandles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.ReplyUpdCandles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.ReplyUpdCandles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getLengthok();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 lengthOK = 1;
 * @return {number}
 */
proto.tradingpb.ReplyUpdCandles.prototype.getLengthok = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.ReplyUpdCandles} returns this
 */
proto.tradingpb.ReplyUpdCandles.prototype.setLengthok = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tradingpb.RequestGetCandles.repeatedFields_ = [7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.RequestGetCandles.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.RequestGetCandles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.RequestGetCandles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.RequestGetCandles.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    market: jspb.Message.getFieldWithDefault(msg, 2, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 3, ""),
    tag: jspb.Message.getFieldWithDefault(msg, 4, ""),
    tsstart: jspb.Message.getFieldWithDefault(msg, 5, 0),
    tsend: jspb.Message.getFieldWithDefault(msg, 6, 0),
    tagsList: (f = jspb.Message.getRepeatedField(msg, 7)) == null ? undefined : f,
    basicrequest: (f = msg.getBasicrequest()) && trading2_pb.BasicRequestData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.RequestGetCandles}
 */
proto.tradingpb.RequestGetCandles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.RequestGetCandles;
  return proto.tradingpb.RequestGetCandles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.RequestGetCandles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.RequestGetCandles}
 */
proto.tradingpb.RequestGetCandles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setTag(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTsstart(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setTsend(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.addTags(value);
      break;
    case 8:
      var value = new trading2_pb.BasicRequestData;
      reader.readMessage(value,trading2_pb.BasicRequestData.deserializeBinaryFromReader);
      msg.setBasicrequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.RequestGetCandles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.RequestGetCandles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.RequestGetCandles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.RequestGetCandles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMarket();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getTag();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getTsstart();
  if (f !== 0) {
    writer.writeInt64(
      5,
      f
    );
  }
  f = message.getTsend();
  if (f !== 0) {
    writer.writeInt64(
      6,
      f
    );
  }
  f = message.getTagsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      7,
      f
    );
  }
  f = message.getBasicrequest();
  if (f != null) {
    writer.writeMessage(
      8,
      f,
      trading2_pb.BasicRequestData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.tradingpb.RequestGetCandles.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.RequestGetCandles} returns this
 */
proto.tradingpb.RequestGetCandles.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string market = 2;
 * @return {string}
 */
proto.tradingpb.RequestGetCandles.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.RequestGetCandles} returns this
 */
proto.tradingpb.RequestGetCandles.prototype.setMarket = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string symbol = 3;
 * @return {string}
 */
proto.tradingpb.RequestGetCandles.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.RequestGetCandles} returns this
 */
proto.tradingpb.RequestGetCandles.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string tag = 4;
 * @return {string}
 */
proto.tradingpb.RequestGetCandles.prototype.getTag = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.RequestGetCandles} returns this
 */
proto.tradingpb.RequestGetCandles.prototype.setTag = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional int64 tsStart = 5;
 * @return {number}
 */
proto.tradingpb.RequestGetCandles.prototype.getTsstart = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.RequestGetCandles} returns this
 */
proto.tradingpb.RequestGetCandles.prototype.setTsstart = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int64 tsEnd = 6;
 * @return {number}
 */
proto.tradingpb.RequestGetCandles.prototype.getTsend = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.RequestGetCandles} returns this
 */
proto.tradingpb.RequestGetCandles.prototype.setTsend = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * repeated string tags = 7;
 * @return {!Array<string>}
 */
proto.tradingpb.RequestGetCandles.prototype.getTagsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 7));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tradingpb.RequestGetCandles} returns this
 */
proto.tradingpb.RequestGetCandles.prototype.setTagsList = function(value) {
  return jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.RequestGetCandles} returns this
 */
proto.tradingpb.RequestGetCandles.prototype.addTags = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.RequestGetCandles} returns this
 */
proto.tradingpb.RequestGetCandles.prototype.clearTagsList = function() {
  return this.setTagsList([]);
};


/**
 * optional BasicRequestData basicRequest = 8;
 * @return {?proto.tradingpb.BasicRequestData}
 */
proto.tradingpb.RequestGetCandles.prototype.getBasicrequest = function() {
  return /** @type{?proto.tradingpb.BasicRequestData} */ (
    jspb.Message.getWrapperField(this, trading2_pb.BasicRequestData, 8));
};


/**
 * @param {?proto.tradingpb.BasicRequestData|undefined} value
 * @return {!proto.tradingpb.RequestGetCandles} returns this
*/
proto.tradingpb.RequestGetCandles.prototype.setBasicrequest = function(value) {
  return jspb.Message.setWrapperField(this, 8, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.RequestGetCandles} returns this
 */
proto.tradingpb.RequestGetCandles.prototype.clearBasicrequest = function() {
  return this.setBasicrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.RequestGetCandles.prototype.hasBasicrequest = function() {
  return jspb.Message.getField(this, 8) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.ReplyGetCandles.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.ReplyGetCandles.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.ReplyGetCandles} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.ReplyGetCandles.toObject = function(includeInstance, msg) {
  var f, obj = {
    candles: (f = msg.getCandles()) && proto.tradingpb.Candles.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.ReplyGetCandles}
 */
proto.tradingpb.ReplyGetCandles.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.ReplyGetCandles;
  return proto.tradingpb.ReplyGetCandles.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.ReplyGetCandles} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.ReplyGetCandles}
 */
proto.tradingpb.ReplyGetCandles.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tradingpb.Candles;
      reader.readMessage(value,proto.tradingpb.Candles.deserializeBinaryFromReader);
      msg.setCandles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.ReplyGetCandles.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.ReplyGetCandles.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.ReplyGetCandles} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.ReplyGetCandles.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCandles();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tradingpb.Candles.serializeBinaryToWriter
    );
  }
};


/**
 * optional Candles candles = 1;
 * @return {?proto.tradingpb.Candles}
 */
proto.tradingpb.ReplyGetCandles.prototype.getCandles = function() {
  return /** @type{?proto.tradingpb.Candles} */ (
    jspb.Message.getWrapperField(this, proto.tradingpb.Candles, 1));
};


/**
 * @param {?proto.tradingpb.Candles|undefined} value
 * @return {!proto.tradingpb.ReplyGetCandles} returns this
*/
proto.tradingpb.ReplyGetCandles.prototype.setCandles = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.ReplyGetCandles} returns this
 */
proto.tradingpb.ReplyGetCandles.prototype.clearCandles = function() {
  return this.setCandles(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.ReplyGetCandles.prototype.hasCandles = function() {
  return jspb.Message.getField(this, 1) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.RequestUpdSymbol.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.RequestUpdSymbol.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.RequestUpdSymbol} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.RequestUpdSymbol.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    symbol: (f = msg.getSymbol()) && proto.tradingpb.SymbolInfo.toObject(includeInstance, f),
    basicrequest: (f = msg.getBasicrequest()) && trading2_pb.BasicRequestData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.RequestUpdSymbol}
 */
proto.tradingpb.RequestUpdSymbol.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.RequestUpdSymbol;
  return proto.tradingpb.RequestUpdSymbol.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.RequestUpdSymbol} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.RequestUpdSymbol}
 */
proto.tradingpb.RequestUpdSymbol.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = new proto.tradingpb.SymbolInfo;
      reader.readMessage(value,proto.tradingpb.SymbolInfo.deserializeBinaryFromReader);
      msg.setSymbol(value);
      break;
    case 3:
      var value = new trading2_pb.BasicRequestData;
      reader.readMessage(value,trading2_pb.BasicRequestData.deserializeBinaryFromReader);
      msg.setBasicrequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.RequestUpdSymbol.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.RequestUpdSymbol.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.RequestUpdSymbol} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.RequestUpdSymbol.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getSymbol();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.tradingpb.SymbolInfo.serializeBinaryToWriter
    );
  }
  f = message.getBasicrequest();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      trading2_pb.BasicRequestData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.tradingpb.RequestUpdSymbol.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.RequestUpdSymbol} returns this
 */
proto.tradingpb.RequestUpdSymbol.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional SymbolInfo symbol = 2;
 * @return {?proto.tradingpb.SymbolInfo}
 */
proto.tradingpb.RequestUpdSymbol.prototype.getSymbol = function() {
  return /** @type{?proto.tradingpb.SymbolInfo} */ (
    jspb.Message.getWrapperField(this, proto.tradingpb.SymbolInfo, 2));
};


/**
 * @param {?proto.tradingpb.SymbolInfo|undefined} value
 * @return {!proto.tradingpb.RequestUpdSymbol} returns this
*/
proto.tradingpb.RequestUpdSymbol.prototype.setSymbol = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.RequestUpdSymbol} returns this
 */
proto.tradingpb.RequestUpdSymbol.prototype.clearSymbol = function() {
  return this.setSymbol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.RequestUpdSymbol.prototype.hasSymbol = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional BasicRequestData basicRequest = 3;
 * @return {?proto.tradingpb.BasicRequestData}
 */
proto.tradingpb.RequestUpdSymbol.prototype.getBasicrequest = function() {
  return /** @type{?proto.tradingpb.BasicRequestData} */ (
    jspb.Message.getWrapperField(this, trading2_pb.BasicRequestData, 3));
};


/**
 * @param {?proto.tradingpb.BasicRequestData|undefined} value
 * @return {!proto.tradingpb.RequestUpdSymbol} returns this
*/
proto.tradingpb.RequestUpdSymbol.prototype.setBasicrequest = function(value) {
  return jspb.Message.setWrapperField(this, 3, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.RequestUpdSymbol} returns this
 */
proto.tradingpb.RequestUpdSymbol.prototype.clearBasicrequest = function() {
  return this.setBasicrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.RequestUpdSymbol.prototype.hasBasicrequest = function() {
  return jspb.Message.getField(this, 3) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.ReplyUpdSymbol.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.ReplyUpdSymbol.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.ReplyUpdSymbol} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.ReplyUpdSymbol.toObject = function(includeInstance, msg) {
  var f, obj = {
    isok: jspb.Message.getBooleanFieldWithDefault(msg, 1, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.ReplyUpdSymbol}
 */
proto.tradingpb.ReplyUpdSymbol.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.ReplyUpdSymbol;
  return proto.tradingpb.ReplyUpdSymbol.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.ReplyUpdSymbol} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.ReplyUpdSymbol}
 */
proto.tradingpb.ReplyUpdSymbol.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIsok(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.ReplyUpdSymbol.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.ReplyUpdSymbol.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.ReplyUpdSymbol} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.ReplyUpdSymbol.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getIsok();
  if (f) {
    writer.writeBool(
      1,
      f
    );
  }
};


/**
 * optional bool isOK = 1;
 * @return {boolean}
 */
proto.tradingpb.ReplyUpdSymbol.prototype.getIsok = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 1, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tradingpb.ReplyUpdSymbol} returns this
 */
proto.tradingpb.ReplyUpdSymbol.prototype.setIsok = function(value) {
  return jspb.Message.setProto3BooleanField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.RequestGetSymbol.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.RequestGetSymbol.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.RequestGetSymbol} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.RequestGetSymbol.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    market: jspb.Message.getFieldWithDefault(msg, 2, ""),
    symbol: jspb.Message.getFieldWithDefault(msg, 3, ""),
    basicrequest: (f = msg.getBasicrequest()) && trading2_pb.BasicRequestData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.RequestGetSymbol}
 */
proto.tradingpb.RequestGetSymbol.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.RequestGetSymbol;
  return proto.tradingpb.RequestGetSymbol.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.RequestGetSymbol} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.RequestGetSymbol}
 */
proto.tradingpb.RequestGetSymbol.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSymbol(value);
      break;
    case 4:
      var value = new trading2_pb.BasicRequestData;
      reader.readMessage(value,trading2_pb.BasicRequestData.deserializeBinaryFromReader);
      msg.setBasicrequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.RequestGetSymbol.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.RequestGetSymbol.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.RequestGetSymbol} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.RequestGetSymbol.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMarket();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSymbol();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getBasicrequest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      trading2_pb.BasicRequestData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.tradingpb.RequestGetSymbol.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.RequestGetSymbol} returns this
 */
proto.tradingpb.RequestGetSymbol.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string market = 2;
 * @return {string}
 */
proto.tradingpb.RequestGetSymbol.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.RequestGetSymbol} returns this
 */
proto.tradingpb.RequestGetSymbol.prototype.setMarket = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string symbol = 3;
 * @return {string}
 */
proto.tradingpb.RequestGetSymbol.prototype.getSymbol = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.RequestGetSymbol} returns this
 */
proto.tradingpb.RequestGetSymbol.prototype.setSymbol = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional BasicRequestData basicRequest = 4;
 * @return {?proto.tradingpb.BasicRequestData}
 */
proto.tradingpb.RequestGetSymbol.prototype.getBasicrequest = function() {
  return /** @type{?proto.tradingpb.BasicRequestData} */ (
    jspb.Message.getWrapperField(this, trading2_pb.BasicRequestData, 4));
};


/**
 * @param {?proto.tradingpb.BasicRequestData|undefined} value
 * @return {!proto.tradingpb.RequestGetSymbol} returns this
*/
proto.tradingpb.RequestGetSymbol.prototype.setBasicrequest = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.RequestGetSymbol} returns this
 */
proto.tradingpb.RequestGetSymbol.prototype.clearBasicrequest = function() {
  return this.setBasicrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.RequestGetSymbol.prototype.hasBasicrequest = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.ReplyGetSymbol.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.ReplyGetSymbol.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.ReplyGetSymbol} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.ReplyGetSymbol.toObject = function(includeInstance, msg) {
  var f, obj = {
    symbol: (f = msg.getSymbol()) && proto.tradingpb.SymbolInfo.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.ReplyGetSymbol}
 */
proto.tradingpb.ReplyGetSymbol.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.ReplyGetSymbol;
  return proto.tradingpb.ReplyGetSymbol.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.ReplyGetSymbol} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.ReplyGetSymbol}
 */
proto.tradingpb.ReplyGetSymbol.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.tradingpb.SymbolInfo;
      reader.readMessage(value,proto.tradingpb.SymbolInfo.deserializeBinaryFromReader);
      msg.setSymbol(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.ReplyGetSymbol.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.ReplyGetSymbol.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.ReplyGetSymbol} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.ReplyGetSymbol.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSymbol();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.tradingpb.SymbolInfo.serializeBinaryToWriter
    );
  }
};


/**
 * optional SymbolInfo symbol = 1;
 * @return {?proto.tradingpb.SymbolInfo}
 */
proto.tradingpb.ReplyGetSymbol.prototype.getSymbol = function() {
  return /** @type{?proto.tradingpb.SymbolInfo} */ (
    jspb.Message.getWrapperField(this, proto.tradingpb.SymbolInfo, 1));
};


/**
 * @param {?proto.tradingpb.SymbolInfo|undefined} value
 * @return {!proto.tradingpb.ReplyGetSymbol} returns this
*/
proto.tradingpb.ReplyGetSymbol.prototype.setSymbol = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.ReplyGetSymbol} returns this
 */
proto.tradingpb.ReplyGetSymbol.prototype.clearSymbol = function() {
  return this.setSymbol(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.ReplyGetSymbol.prototype.hasSymbol = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tradingpb.RequestGetSymbols.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.RequestGetSymbols.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.RequestGetSymbols.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.RequestGetSymbols} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.RequestGetSymbols.toObject = function(includeInstance, msg) {
  var f, obj = {
    token: jspb.Message.getFieldWithDefault(msg, 1, ""),
    market: jspb.Message.getFieldWithDefault(msg, 2, ""),
    symbolsList: (f = jspb.Message.getRepeatedField(msg, 3)) == null ? undefined : f,
    basicrequest: (f = msg.getBasicrequest()) && trading2_pb.BasicRequestData.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.RequestGetSymbols}
 */
proto.tradingpb.RequestGetSymbols.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.RequestGetSymbols;
  return proto.tradingpb.RequestGetSymbols.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.RequestGetSymbols} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.RequestGetSymbols}
 */
proto.tradingpb.RequestGetSymbols.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setToken(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMarket(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addSymbols(value);
      break;
    case 4:
      var value = new trading2_pb.BasicRequestData;
      reader.readMessage(value,trading2_pb.BasicRequestData.deserializeBinaryFromReader);
      msg.setBasicrequest(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.RequestGetSymbols.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.RequestGetSymbols.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.RequestGetSymbols} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.RequestGetSymbols.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getToken();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMarket();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSymbolsList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
  f = message.getBasicrequest();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      trading2_pb.BasicRequestData.serializeBinaryToWriter
    );
  }
};


/**
 * optional string token = 1;
 * @return {string}
 */
proto.tradingpb.RequestGetSymbols.prototype.getToken = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.RequestGetSymbols} returns this
 */
proto.tradingpb.RequestGetSymbols.prototype.setToken = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string market = 2;
 * @return {string}
 */
proto.tradingpb.RequestGetSymbols.prototype.getMarket = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.tradingpb.RequestGetSymbols} returns this
 */
proto.tradingpb.RequestGetSymbols.prototype.setMarket = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated string symbols = 3;
 * @return {!Array<string>}
 */
proto.tradingpb.RequestGetSymbols.prototype.getSymbolsList = function() {
  return /** @type {!Array<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/**
 * @param {!Array<string>} value
 * @return {!proto.tradingpb.RequestGetSymbols} returns this
 */
proto.tradingpb.RequestGetSymbols.prototype.setSymbolsList = function(value) {
  return jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {string} value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.RequestGetSymbols} returns this
 */
proto.tradingpb.RequestGetSymbols.prototype.addSymbols = function(value, opt_index) {
  return jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.RequestGetSymbols} returns this
 */
proto.tradingpb.RequestGetSymbols.prototype.clearSymbolsList = function() {
  return this.setSymbolsList([]);
};


/**
 * optional BasicRequestData basicRequest = 4;
 * @return {?proto.tradingpb.BasicRequestData}
 */
proto.tradingpb.RequestGetSymbols.prototype.getBasicrequest = function() {
  return /** @type{?proto.tradingpb.BasicRequestData} */ (
    jspb.Message.getWrapperField(this, trading2_pb.BasicRequestData, 4));
};


/**
 * @param {?proto.tradingpb.BasicRequestData|undefined} value
 * @return {!proto.tradingpb.RequestGetSymbols} returns this
*/
proto.tradingpb.RequestGetSymbols.prototype.setBasicrequest = function(value) {
  return jspb.Message.setWrapperField(this, 4, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.RequestGetSymbols} returns this
 */
proto.tradingpb.RequestGetSymbols.prototype.clearBasicrequest = function() {
  return this.setBasicrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.RequestGetSymbols.prototype.hasBasicrequest = function() {
  return jspb.Message.getField(this, 4) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.RequestSimTrading.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.RequestSimTrading.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.RequestSimTrading} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.RequestSimTrading.toObject = function(includeInstance, msg) {
  var f, obj = {
    basicrequest: (f = msg.getBasicrequest()) && trading2_pb.BasicRequestData.toObject(includeInstance, f),
    params: (f = msg.getParams()) && trading2_pb.SimTradingParams.toObject(includeInstance, f),
    ignorecache: jspb.Message.getBooleanFieldWithDefault(msg, 3, false),
    index: jspb.Message.getFieldWithDefault(msg, 4, 0),
    ignoretotalreturn: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.RequestSimTrading}
 */
proto.tradingpb.RequestSimTrading.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.RequestSimTrading;
  return proto.tradingpb.RequestSimTrading.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.RequestSimTrading} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.RequestSimTrading}
 */
proto.tradingpb.RequestSimTrading.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new trading2_pb.BasicRequestData;
      reader.readMessage(value,trading2_pb.BasicRequestData.deserializeBinaryFromReader);
      msg.setBasicrequest(value);
      break;
    case 2:
      var value = new trading2_pb.SimTradingParams;
      reader.readMessage(value,trading2_pb.SimTradingParams.deserializeBinaryFromReader);
      msg.setParams(value);
      break;
    case 3:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setIgnorecache(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setIgnoretotalreturn(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.RequestSimTrading.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.RequestSimTrading.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.RequestSimTrading} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.RequestSimTrading.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBasicrequest();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      trading2_pb.BasicRequestData.serializeBinaryToWriter
    );
  }
  f = message.getParams();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      trading2_pb.SimTradingParams.serializeBinaryToWriter
    );
  }
  f = message.getIgnorecache();
  if (f) {
    writer.writeBool(
      3,
      f
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getIgnoretotalreturn();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
};


/**
 * optional BasicRequestData basicRequest = 1;
 * @return {?proto.tradingpb.BasicRequestData}
 */
proto.tradingpb.RequestSimTrading.prototype.getBasicrequest = function() {
  return /** @type{?proto.tradingpb.BasicRequestData} */ (
    jspb.Message.getWrapperField(this, trading2_pb.BasicRequestData, 1));
};


/**
 * @param {?proto.tradingpb.BasicRequestData|undefined} value
 * @return {!proto.tradingpb.RequestSimTrading} returns this
*/
proto.tradingpb.RequestSimTrading.prototype.setBasicrequest = function(value) {
  return jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.RequestSimTrading} returns this
 */
proto.tradingpb.RequestSimTrading.prototype.clearBasicrequest = function() {
  return this.setBasicrequest(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.RequestSimTrading.prototype.hasBasicrequest = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional SimTradingParams params = 2;
 * @return {?proto.tradingpb.SimTradingParams}
 */
proto.tradingpb.RequestSimTrading.prototype.getParams = function() {
  return /** @type{?proto.tradingpb.SimTradingParams} */ (
    jspb.Message.getWrapperField(this, trading2_pb.SimTradingParams, 2));
};


/**
 * @param {?proto.tradingpb.SimTradingParams|undefined} value
 * @return {!proto.tradingpb.RequestSimTrading} returns this
*/
proto.tradingpb.RequestSimTrading.prototype.setParams = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.tradingpb.RequestSimTrading} returns this
 */
proto.tradingpb.RequestSimTrading.prototype.clearParams = function() {
  return this.setParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.tradingpb.RequestSimTrading.prototype.hasParams = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional bool ignoreCache = 3;
 * @return {boolean}
 */
proto.tradingpb.RequestSimTrading.prototype.getIgnorecache = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 3, false));
};


/**
 * @param {boolean} value
 * @return {!proto.tradingpb.RequestSimTrading} returns this
 */
proto.tradingpb.RequestSimTrading.prototype.setIgnorecache = function(value) {
  return jspb.Message.setProto3BooleanField(this, 3, value);
};


/**
 * optional int32 index = 4;
 * @return {number}
 */
proto.tradingpb.RequestSimTrading.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.RequestSimTrading} returns this
 */
proto.tradingpb.RequestSimTrading.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional float ignoreTotalReturn = 5;
 * @return {number}
 */
proto.tradingpb.RequestSimTrading.prototype.getIgnoretotalreturn = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.RequestSimTrading} returns this
 */
proto.tradingpb.RequestSimTrading.prototype.setIgnoretotalreturn = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.tradingpb.ReplySimTrading.repeatedFields_ = [1,2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.tradingpb.ReplySimTrading.prototype.toObject = function(opt_includeInstance) {
  return proto.tradingpb.ReplySimTrading.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.tradingpb.ReplySimTrading} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.ReplySimTrading.toObject = function(includeInstance, msg) {
  var f, obj = {
    pnlList: jspb.Message.toObjectList(msg.getPnlList(),
    trading2_pb.PNLData.toObject, includeInstance),
    baselineList: jspb.Message.toObjectList(msg.getBaselineList(),
    trading2_pb.PNLData.toObject, includeInstance),
    index: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.tradingpb.ReplySimTrading}
 */
proto.tradingpb.ReplySimTrading.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.tradingpb.ReplySimTrading;
  return proto.tradingpb.ReplySimTrading.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.tradingpb.ReplySimTrading} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.tradingpb.ReplySimTrading}
 */
proto.tradingpb.ReplySimTrading.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new trading2_pb.PNLData;
      reader.readMessage(value,trading2_pb.PNLData.deserializeBinaryFromReader);
      msg.addPnl(value);
      break;
    case 2:
      var value = new trading2_pb.PNLData;
      reader.readMessage(value,trading2_pb.PNLData.deserializeBinaryFromReader);
      msg.addBaseline(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setIndex(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.tradingpb.ReplySimTrading.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.tradingpb.ReplySimTrading.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.tradingpb.ReplySimTrading} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.tradingpb.ReplySimTrading.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPnlList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      trading2_pb.PNLData.serializeBinaryToWriter
    );
  }
  f = message.getBaselineList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      trading2_pb.PNLData.serializeBinaryToWriter
    );
  }
  f = message.getIndex();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * repeated PNLData pnl = 1;
 * @return {!Array<!proto.tradingpb.PNLData>}
 */
proto.tradingpb.ReplySimTrading.prototype.getPnlList = function() {
  return /** @type{!Array<!proto.tradingpb.PNLData>} */ (
    jspb.Message.getRepeatedWrapperField(this, trading2_pb.PNLData, 1));
};


/**
 * @param {!Array<!proto.tradingpb.PNLData>} value
 * @return {!proto.tradingpb.ReplySimTrading} returns this
*/
proto.tradingpb.ReplySimTrading.prototype.setPnlList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.tradingpb.PNLData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.PNLData}
 */
proto.tradingpb.ReplySimTrading.prototype.addPnl = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.tradingpb.PNLData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.ReplySimTrading} returns this
 */
proto.tradingpb.ReplySimTrading.prototype.clearPnlList = function() {
  return this.setPnlList([]);
};


/**
 * repeated PNLData baseline = 2;
 * @return {!Array<!proto.tradingpb.PNLData>}
 */
proto.tradingpb.ReplySimTrading.prototype.getBaselineList = function() {
  return /** @type{!Array<!proto.tradingpb.PNLData>} */ (
    jspb.Message.getRepeatedWrapperField(this, trading2_pb.PNLData, 2));
};


/**
 * @param {!Array<!proto.tradingpb.PNLData>} value
 * @return {!proto.tradingpb.ReplySimTrading} returns this
*/
proto.tradingpb.ReplySimTrading.prototype.setBaselineList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.tradingpb.PNLData=} opt_value
 * @param {number=} opt_index
 * @return {!proto.tradingpb.PNLData}
 */
proto.tradingpb.ReplySimTrading.prototype.addBaseline = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.tradingpb.PNLData, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.tradingpb.ReplySimTrading} returns this
 */
proto.tradingpb.ReplySimTrading.prototype.clearBaselineList = function() {
  return this.setBaselineList([]);
};


/**
 * optional int32 index = 3;
 * @return {number}
 */
proto.tradingpb.ReplySimTrading.prototype.getIndex = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.tradingpb.ReplySimTrading} returns this
 */
proto.tradingpb.ReplySimTrading.prototype.setIndex = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


goog.object.extend(exports, proto.tradingpb);
